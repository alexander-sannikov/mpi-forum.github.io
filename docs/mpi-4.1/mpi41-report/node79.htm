<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-pt2pt/pt2pt-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title>Probe</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node79">4.8.1. Probe</span></h2>
<a href="node78.htm#Node78"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node78.htm#Node78"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node80.htm#Node80"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node78.htm#Node78"> Probe and Cancel</a>
<b>Next: </b><a href="node80.htm#Node80"> Matching Probe</a>
<b>Previous: </b><a href="node78.htm#Node78"> Probe and Cancel</a>
<p>
  
  
  
  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_IPROBE(<span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">tag</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">flag</span>, <span style="white-space:nowrap">status</span>)</TD></TR>  
<TR><TD> IN source</TD><TD>rank of source or <font face="sans-serif"> MPI_ANY_SOURCE</font> (integer)</TD></TR>  
<TR><TD> IN tag</TD><TD>message tag or <font face="sans-serif"> MPI_ANY_TAG</font> (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT flag</TD><TD><font face="sans-serif"> true</font> if there is a matching message that can be received (logical)</TD></TR>  
<TR><TD> OUT status</TD><TD>status object (status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Iprobe(int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Iprobe(source, tag, comm, flag, status, ierror) <br><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">tag</span> <br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span> <br>LOGICAL, INTENT(OUT) :: <span style="white-space:nowrap">flag</span> <br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_IPROBE(SOURCE, TAG, COMM, FLAG, STATUS, IERROR) <br><br>INTEGER <span style="white-space:nowrap">SOURCE</span>, <span style="white-space:nowrap">TAG</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span> <br>LOGICAL <span style="white-space:nowrap">FLAG</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_IPROBE</font>  
returns <font face="sans-serif"> flag</font><font face="sans-serif">  = true</font>  
if there is a message that can be received  
and that matches the pattern specified by the  
arguments <font face="sans-serif"> source</font>, <font face="sans-serif"> tag</font>, and <font face="sans-serif"> comm</font>.  
The call matches the same message  
that would have been received by a call to <font face="sans-serif"> MPI_RECV</font> with the same argument values for <font face="sans-serif"> source</font>, <font face="sans-serif"> tag</font>,  
<font face="sans-serif"> comm</font>, and <font face="sans-serif"> status</font> executed at the same point in the program, and returns in  
<font face="sans-serif"> status</font> the same  
value that would have been returned by <font face="sans-serif"> MPI_RECV</font>.  
Otherwise, the call returns <font face="sans-serif"> flag</font><font face="sans-serif">  = false</font>, and leaves <font face="sans-serif"> status</font>  
undefined.  
<P> 
If <font face="sans-serif"> MPI_IPROBE</font> returns <font face="sans-serif"> flag</font><font face="sans-serif">  = true</font>,  
then the content of the status object can be subsequently  
accessed as described in Section <a href="node60.htm#Node60">Return Status</a> to find the  
source, tag, and length of the probed message.  
<P> 
<font face="sans-serif"> MPI_IPROBE</font> is a <em> local</em> procedure since its return does not depend  
on <font face="sans-serif"> MPI</font> calls in other <font face="sans-serif"> MPI</font> processes, which is marked with the prefix <font face="sans-serif"> I</font> (for <em> immediate</em>).  
<P> 
A subsequent receive executed with the same communicator, and the source and  
tag returned in status by <font face="sans-serif"> MPI_IPROBE</font> will receive the message that  
was matched by the probe, if no other intervening receive occurs after the  
probe, and the send is not successfully <em> cancelled</em> before the receive.  
If the receiving <font face="sans-serif"> MPI</font> process is multithreaded, it is the user's  
responsibility to ensure that the last condition holds.  
<P> 
The <font face="sans-serif"> source</font> argument of <font face="sans-serif"> MPI_IPROBE</font> can be  
<font face="sans-serif"> MPI_ANY_SOURCE</font>, and the <font face="sans-serif"> tag</font> argument can be  
<font face="sans-serif"> MPI_ANY_TAG</font>, so that one can <em> probe</em> for <em> messages</em> from an arbitrary  
source and/or with  
an arbitrary tag.  However, a specific communication context  
must be provided with the <font face="sans-serif"> comm</font> argument.  
<P> 
It is not necessary to receive a message immediately after it has been  
probed for, and the  
same message may be probed for several times before it is received.  
<P> 
A probe with <font face="sans-serif"> MPI_PROC_NULL</font> as source returns <font face="sans-serif"> flag</font><font face="sans-serif">  = true</font>, and the status object returns <font face="sans-serif"> source</font><font face="sans-serif">  = </font><font face="sans-serif"> MPI_PROC_NULL</font>,  
<font face="sans-serif"> tag</font><font face="sans-serif">  = </font><font face="sans-serif"> MPI_ANY_TAG</font>, and <font face="sans-serif"> count</font><font face="sans-serif">  = 0</font>;  
see Section <a href="node84.htm#Node84">Null <font face="sans-serif"> MPI</font> Processes</a>.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_PROBE(<span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">tag</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">status</span>)</TD></TR>  
<TR><TD> IN source</TD><TD>rank of source or <font face="sans-serif"> MPI_ANY_SOURCE</font> (integer)</TD></TR>  
<TR><TD> IN tag</TD><TD>message tag or <font face="sans-serif"> MPI_ANY_TAG</font> (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT status</TD><TD>status object (status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Probe(int source, int tag, MPI_Comm comm, MPI_Status *status) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Probe(source, tag, comm, status, ierror) <br><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">tag</span> <br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span> <br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_PROBE(SOURCE, TAG, COMM, STATUS, IERROR) <br><br>INTEGER <span style="white-space:nowrap">SOURCE</span>, <span style="white-space:nowrap">TAG</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_PROBE</font> behaves like <font face="sans-serif"> MPI_IPROBE</font> except that it is a <em> nonlocal</em>  
call that returns only after a matching message has been found.  
<P> 
The <font face="sans-serif"> MPI</font> implementation of <font face="sans-serif"> MPI_PROBE</font> and <font face="sans-serif"> MPI_IPROBE</font> needs  
to guarantee <em> progress</em>:  
if a call to <font face="sans-serif"> MPI_PROBE</font> has been issued by an <font face="sans-serif"> MPI</font> process, and a send that  
matches the probe has been <em> initiated</em> by some <font face="sans-serif"> MPI</font> process, then the call to  
<font face="sans-serif"> MPI_PROBE</font> will return, unless the message is received by another  
concurrent receive operation (that is executed by another thread at the probing  
<font face="sans-serif"> MPI</font> process).  
<P> 
Similarly, if an <font face="sans-serif"> MPI</font> process repeatedly calls  
<font face="sans-serif"> MPI_IPROBE</font> and a matching message has been issued,  
then  
<font face="sans-serif"> MPI_IPROBE</font> will eventually return <font face="sans-serif"> flag</font><font face="sans-serif">  = true</font>  
unless the message is received by another concurrent receive  
operation or matched by a concurrent <em> matching probe</em>.  
See also Section <a href="node48.htm#Node48">Progress</a> on <em> progress</em>.  
<P> 
<br><b> Example</b>  
  
Use probe to wait for an incoming message.  
<P> 
<P><img width=881 height=374 src="img29.gif" alt="Image file"><P>
Each message is received with the right type.  
  
<P> 
<br><b> Example</b>  
  
A similar program to the previous example, but now it  
has a problem.  
<P> 
<P><img width=783 height=449 src="img30.gif" alt="Image file"><P>
In Example <a href="node79.htm#Node79">Probe</a>,  
the two receive calls in statements labeled 100 and 200 in  
Example <a href="node79.htm#Node79">Probe</a> are  
slightly modified,  
using <font face="sans-serif"> MPI_ANY_SOURCE</font> as the <font face="sans-serif"> source</font>  
argument.  
The program is now incorrect: the receive operation may receive a message that  
is distinct from the message probed by the preceding call to  
<font face="sans-serif"> MPI_PROBE</font>.  
  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
In a multithreaded <font face="sans-serif"> MPI</font> program, <font face="sans-serif"> MPI_PROBE</font> and  
<font face="sans-serif"> MPI_IPROBE</font> might need special care.  
If a thread <em> probes</em> for a message and then immediately posts a matching  
receive, the receive may match a message other than that found by the probe since another thread could concurrently receive that original  
message [<a href="node600.htm#-Bib34">34</a>].  
<font face="sans-serif"> MPI_MPROBE</font> and <font face="sans-serif"> MPI_IMPROBE</font> solve this problem by  
matching the incoming message so that it may only be received with  
<font face="sans-serif"> MPI_MRECV</font> or <font face="sans-serif"> MPI_IMRECV</font> on the corresponding <em> message handle</em>.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
A call to <font face="sans-serif"> MPI_PROBE</font> will match the  
message that would have been received by a call to <font face="sans-serif"> MPI_RECV</font>  
with the same argmument values for <font face="sans-serif"> source</font>, <font face="sans-serif"> tag</font>, <font face="sans-serif"> comm</font>, and <font face="sans-serif"> status</font> executed at the same point.  
Suppose  
that this message has source <font face="sans-serif"> s</font>, tag <font face="sans-serif"> t</font> and communicator  
<font face="sans-serif"> c</font>.  If the  
tag argument in the probe call has value <font face="sans-serif"> MPI_ANY_TAG</font>  
then the message probed  
will be the earliest pending message from source <font face="sans-serif"> s</font>  
with communicator <font face="sans-serif"> c</font> and any tag; in any case, the message probed will be the  
earliest pending message from source <font face="sans-serif"> s</font> with tag <font face="sans-serif"> t</font> and  
communicator  
<font face="sans-serif"> c</font> (this is  
the message that would have been received, so as to preserve message order).  
This message continues as the earliest pending message  
from source <font face="sans-serif"> s</font> with tag <font face="sans-serif"> t</font> and communicator <font face="sans-serif"> c</font>, until it is received.  
A receive operation subsequent to the probe that uses the same communicator as the  
probe and uses the tag and source values returned by the probe, must receive  
this message, unless it has already been received by another receive operation.  
 (<em> End of advice to implementors.</em>) <br> 

<P>
<hr>
<a href="node78.htm#Node78"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node78.htm#Node78"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node80.htm#Node80"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node78.htm#Node78"> Probe and Cancel</a>
<b>Next: </b><a href="node80.htm#Node80"> Matching Probe</a>
<b>Previous: </b><a href="node78.htm#Node78"> Probe and Cancel</a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
