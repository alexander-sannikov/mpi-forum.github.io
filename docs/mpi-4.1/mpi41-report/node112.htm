<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-datatypes/datatypes-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title>Canonical <font face="sans-serif"> MPI_PACK</font> and <font face="sans-serif"> MPI_UNPACK</font></title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node112">6.3. Canonical  MPI_PACK and  MPI_UNPACK</span></h1>
<a href="node111.htm#Node111"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node95.htm#Node95"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node113.htm#Node113"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node95.htm#Node95"> Datatypes</a>
<b>Next: </b><a href="node113.htm#Node113"> Collective Communication</a>
<b>Previous: </b><a href="node111.htm#Node111"> Pack and Unpack</a>
<p>
  
  
  
  
<P> 
These procedures read/write data to/from the buffer in the  
<font face="sans-serif"> </font><tt>"</tt>external32<tt>"</tt></font> data  
format specified in Section <a href="node377.htm#Node377">External Data Representation: <font face="sans-serif"> </font><tt>"</tt>external32<tt>"</tt></font></a>, and calculate the size needed  
for packing.  Their first arguments specify the data format, for future  
extensibility, but  
currently  
the only valid value of the <font face="sans-serif"> datarep</font>  
argument is <font face="sans-serif"> </font><tt>"</tt>external32<tt>"</tt></font>.  
 
<br> 
<em> Advice to users.</em>  
<P> 
These procedures could be used, for example, to send typed data in a portable  
  format from one <font face="sans-serif"> MPI</font> implementation to another.  
 (<em> End of advice to users.</em>) <br> 
The buffer will contain exactly the packed data, without headers.  
<font face="sans-serif"> MPI_BYTE</font> should be used to send and receive data that is packed  
using <font face="sans-serif"> MPI_PACK_EXTERNAL</font>.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
<font face="sans-serif"> MPI_PACK_EXTERNAL</font> specifies that there is no header on the message  
and further  
specifies the exact format of the data.  Since <font face="sans-serif"> MPI_PACK</font> may (and is  
allowed  
to) use a header, the datatype <font face="sans-serif"> MPI_PACKED</font> cannot be used for data  
packed with  
<font face="sans-serif"> MPI_PACK_EXTERNAL</font>.  
 (<em> End of rationale.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_PACK_EXTERNAL(<span style="white-space:nowrap">datarep</span>, <span style="white-space:nowrap">inbuf</span>, <span style="white-space:nowrap">incount</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">outbuf</span>, <span style="white-space:nowrap">outsize</span>, <span style="white-space:nowrap">position</span>)</TD></TR>  
<TR><TD> IN datarep</TD><TD>data representation (string)</TD></TR>  
<TR><TD> IN inbuf</TD><TD>input buffer start (choice)</TD></TR>  
<TR><TD> IN incount</TD><TD>number of input data items (integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each input data item (handle)</TD></TR>  
<TR><TD> OUT outbuf</TD><TD>output buffer start (choice)</TD></TR>  
<TR><TD> IN outsize</TD><TD>output buffer size, in bytes (integer)</TD></TR>  
<TR><TD> INOUT position</TD><TD>current position in buffer, in bytes (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Pack_external(const char datarep[], const void *inbuf, int incount, MPI_Datatype datatype, void *outbuf, MPI_Aint outsize, MPI_Aint *position) <br></tt>  
  
  <tt> int MPI_Pack_external_c(const char datarep[], const void *inbuf, MPI_Count incount, MPI_Datatype datatype, void *outbuf, MPI_Count outsize, MPI_Count *position) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Pack_external(datarep, inbuf, incount, datatype, outbuf, outsize, position, ierror) <br><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">datarep</span> <br>TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">inbuf</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">incount</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">outbuf</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">outsize</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(INOUT) :: <span style="white-space:nowrap">position</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Pack_external(datarep, inbuf, incount, datatype, outbuf, outsize, position, ierror) !(_c) <br><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">datarep</span> <br>TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">inbuf</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">incount</span>, <span style="white-space:nowrap">outsize</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">outbuf</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(INOUT) :: <span style="white-space:nowrap">position</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_PACK_EXTERNAL(DATAREP, INBUF, INCOUNT, DATATYPE, OUTBUF, OUTSIZE, POSITION, IERROR) <br><br>CHARACTER*(*) <span style="white-space:nowrap">DATAREP</span> <br>&lt;type&gt; <span style="white-space:nowrap">INBUF(*)</span>, <span style="white-space:nowrap">OUTBUF(*)</span> <br>INTEGER <span style="white-space:nowrap">INCOUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">OUTSIZE</span>, <span style="white-space:nowrap">POSITION</span> <br></tt>  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_UNPACK_EXTERNAL(<span style="white-space:nowrap">datarep</span>, <span style="white-space:nowrap">inbuf</span>, <span style="white-space:nowrap">insize</span>, <span style="white-space:nowrap">position</span>, <span style="white-space:nowrap">outbuf</span>, <span style="white-space:nowrap">outcount</span>, <span style="white-space:nowrap">datatype</span>)</TD></TR>  
<TR><TD> IN datarep</TD><TD>data representation (string)</TD></TR>  
<TR><TD> IN inbuf</TD><TD>input buffer start (choice)</TD></TR>  
<TR><TD> IN insize</TD><TD>input buffer size, in bytes (integer)</TD></TR>  
<TR><TD> INOUT position</TD><TD>current position in buffer, in bytes (integer)</TD></TR>  
<TR><TD> OUT outbuf</TD><TD>output buffer start (choice)</TD></TR>  
<TR><TD> IN outcount</TD><TD>number of output data items (integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of output data item (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Unpack_external(const char datarep[], const void *inbuf, MPI_Aint insize, MPI_Aint *position, void *outbuf, int outcount, MPI_Datatype datatype) <br></tt>  
  
  <tt> int MPI_Unpack_external_c(const char datarep[], const void *inbuf, MPI_Count insize, MPI_Count *position, void *outbuf, MPI_Count outcount, MPI_Datatype datatype) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Unpack_external(datarep, inbuf, insize, position, outbuf, outcount, datatype, ierror) <br><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">datarep</span> <br>TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">inbuf</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">insize</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(INOUT) :: <span style="white-space:nowrap">position</span> <br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">outbuf</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">outcount</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Unpack_external(datarep, inbuf, insize, position, outbuf, outcount, datatype, ierror) !(_c) <br><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">datarep</span> <br>TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">inbuf</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">insize</span>, <span style="white-space:nowrap">outcount</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(INOUT) :: <span style="white-space:nowrap">position</span> <br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">outbuf</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_UNPACK_EXTERNAL(DATAREP, INBUF, INSIZE, POSITION, OUTBUF, OUTCOUNT, DATATYPE, IERROR) <br><br>CHARACTER*(*) <span style="white-space:nowrap">DATAREP</span> <br>&lt;type&gt; <span style="white-space:nowrap">INBUF(*)</span>, <span style="white-space:nowrap">OUTBUF(*)</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">INSIZE</span>, <span style="white-space:nowrap">POSITION</span> <br>INTEGER <span style="white-space:nowrap">OUTCOUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_PACK_EXTERNAL_SIZE(<span style="white-space:nowrap">datarep</span>, <span style="white-space:nowrap">incount</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">size</span>)</TD></TR>  
<TR><TD> IN datarep</TD><TD>data representation (string)</TD></TR>  
<TR><TD> IN incount</TD><TD>number of input data items (integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each input data item (handle)</TD></TR>  
<TR><TD> OUT size</TD><TD>output buffer size, in bytes (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Pack_external_size(const char datarep[], int incount, MPI_Datatype datatype, MPI_Aint *size) <br></tt>  
  
  <tt> int MPI_Pack_external_size_c(const char datarep[], MPI_Count incount, MPI_Datatype datatype, MPI_Count *size) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Pack_external_size(datarep, incount, datatype, size, ierror) <br><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">datarep</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">incount</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: <span style="white-space:nowrap">size</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Pack_external_size(datarep, incount, datatype, size, ierror) !(_c) <br><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">datarep</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">incount</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: <span style="white-space:nowrap">size</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_PACK_EXTERNAL_SIZE(DATAREP, INCOUNT, DATATYPE, SIZE, IERROR) <br><br>CHARACTER*(*) <span style="white-space:nowrap">DATAREP</span> <br>INTEGER <span style="white-space:nowrap">INCOUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">SIZE</span> <br></tt>  
<P> 
<P> 
  

<P>
<hr>
<a href="node111.htm#Node111"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node95.htm#Node95"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node113.htm#Node113"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node95.htm#Node95"> Datatypes</a>
<b>Next: </b><a href="node113.htm#Node113"> Collective Communication</a>
<b>Previous: </b><a href="node111.htm#Node111"> Pack and Unpack</a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
