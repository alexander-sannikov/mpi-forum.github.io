<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-coll/coll-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title>Examples using <font face="sans-serif"> MPI_GATHER</font>, <font face="sans-serif"> MPI_GATHERV</font></title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node123">7.5.1. Examples using  MPI_GATHER,  MPI_GATHERV</span></h2>
<a href="node122.htm#Node122"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node122.htm#Node122"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node124.htm#Node124"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node122.htm#Node122"> Gather</a>
<b>Next: </b><a href="node124.htm#Node124"> Scatter</a>
<b>Previous: </b><a href="node122.htm#Node122"> Gather</a>
<p>
The examples in this section use intra-communicators.  
<P> 
<br><b> Example</b>  
  
Gather 100 <tt>int</tt>s from every <font face="sans-serif"> MPI</font> process in group to the root. See   
Figure <a href="node123.htm#Figure7">7</a>.  
<P> 
<P><img width=841 height=175 src="img188.gif" alt="Image file"><P>
  
<P> 
<br><b> Example</b>  
  
Previous example modified---only the root allocates memory for the  
receive buffer.  
<P> 
<P><img width=841 height=250 src="img189.gif" alt="Image file"><P>
  
<P> 
  <div style="text-align:center"><P><img width=983 height=410 src="mycoll-fig2.gif" alt="Image file"><P>
</div>  
  <br> 
<b>Figure 7: </b><span id="Figure7">The root gathers 100 <tt>int</tt>s from  
    each <font face="sans-serif"> MPI</font> process in the group.</span><P> 
  
    
<br><b> Example</b>  
  
Do the same as the previous example, but use a derived datatype.  Note that  
the type cannot be the entire set of <tt>gsize*100 int</tt>s since type matching  
is defined pairwise between the root and each <font face="sans-serif"> MPI</font> process in the gather.  
<P> 
<P><img width=791 height=250 src="img190.gif" alt="Image file"><P>
  
<P> 
<br><b> Example</b>  
  
Now have each <font face="sans-serif"> MPI</font> process send 100 <tt>int</tt>s to the root, but place each set (of 100)  
<tt>stride int</tt>s apart at the receiving end. Use <font face="sans-serif"> MPI_GATHERV</font>  
and the <font face="sans-serif"> displs</font>  
argument to achieve this effect. Assume <tt>stride</tt> <i>&le; 100</i>.  
See Figure <a href="node123.htm#Figure8">8</a>.  
<P> 
<P><img width=842 height=424 src="img191.gif" alt="Image file"><P>
Note that the program is erroneous if <tt>stride</tt> <i>&lt; 100</i>.  
  
<P> 
  <div style="text-align:center"><P><img width=983 height=410 src="mycoll-fig3.gif" alt="Image file"><P>
</div>  
  <br> 
<b>Figure 8: </b><span id="Figure8">The root gathers 100  
    <tt>int</tt>s from each <font face="sans-serif"> MPI</font> process 
  in the group, each set is placed <tt>stride int</tt>s apart.</span><P> 
  
    
<br><b> Example</b>  
  
Same as Example <a href="node123.htm#Node123">Examples using <font face="sans-serif"> MPI_GATHER</font>, <font face="sans-serif"> MPI_GATHERV</font></a> on the receiving side, but send the  
100 <tt>int</tt>s from the 0th column of a  
100<i>&#215;</i>150 <tt>int</tt> array, in C.  See Figure <a href="node123.htm#Figure9">9</a>.  
<P> 
<P><img width=792 height=549 src="img192.gif" alt="Image file"><P>
  
<P> 
  <div style="text-align:center"><P><img width=1158 height=523 src="mycoll-fig4.gif" alt="Image file"><P>
</div>  
  <br> 
<b>Figure 9: </b><span id="Figure9">The root gathers column  
    <tt>0</tt> of a 100$ x $150  
  C array, and each set is placed <tt>stride int</tt>s apart.</span><P> 
  
    
<br><b> Example</b>  
  
<font face="sans-serif"> MPI</font> process <tt>i</tt> sends <tt>(100-i) int</tt>s from the <tt>i</tt>-th column of a  
100 <i>&#215;</i> 150 <tt>int</tt> array, in C.  It is received into a buffer with stride,  
as in the previous two examples. See Figure <a href="node123.htm#Figure10">10</a>.  
<P> 
<P><img width=832 height=648 src="img193.gif" alt="Image file"><P>
Note that a different amount of data is received from each <font face="sans-serif"> MPI</font> process.  
  
<P> 
  <div style="text-align:center"><P><img width=1158 height=523 src="mycoll-fig5.gif" alt="Image file"><P>
</div>  
  <br> 
<b>Figure 10: </b><span id="Figure10">The  
    root gathers <tt>100-i int</tt>s from 
  column <tt>i</tt> of a 100$ x $150 
  C array, and each set is placed <tt>stride int</tt>s apart.</span><P> 
  
    
<br><b> Example</b>  
  
Same as Example <a href="node123.htm#Node123">Examples using <font face="sans-serif"> MPI_GATHER</font>, <font face="sans-serif"> MPI_GATHERV</font></a>, but done in a different way at the sending end.  
We create a datatype that causes the correct striding at the  
sending end so   
that   
we read a column of a C array.  
A similar thing was done in Example <a href="node110.htm#Node110">Examples</a>,  
Section <a href="node110.htm#Node110">Examples</a>.  
<P> 
<P><img width=842 height=598 src="img194.gif" alt="Image file"><P>
  
<P> 
<br><b> Example</b>  
  
Same as Example <a href="node123.htm#Node123">Examples using <font face="sans-serif"> MPI_GATHER</font>, <font face="sans-serif"> MPI_GATHERV</font></a> at sending side, but  
at receiving side we make the  
stride between received blocks vary from block to block.  
See Figure <a href="node123.htm#Figure11">11</a>.  
<P> 
<P><img width=732 height=922 src="img195.gif" alt="Image file"><P>
  
<P> 
  <div style="text-align:center"><P><img width=1158 height=523 src="mycoll-fig6.gif" alt="Image file"><P>
</div>  
  <br> 
<b>Figure 11: </b><span id="Figure11">The root gathers <tt>100-i int</tt>s from 
  column <tt>i</tt> of a 100$ x $150 
  C array, and each set is placed <tt>stride[i] int</tt>s apart (a varying 
  stride).</span><P> 
  
    
<br><b> Example</b>  
  
<font face="sans-serif"> MPI</font> process <tt>i</tt> sends <tt>num int</tt>s from the <tt>i</tt>-th column of a  
100 <i>&#215;</i> 150 <tt>int</tt> array, in C.  The complicating factor is that  
the various values of <tt>num</tt> are not known to <tt>root</tt>, so a  
separate gather must first be run to find these out.  The data is  
placed contiguously at the receiving end.  
<P> 
<P><img width=856 height=847 src="img196.gif" alt="Image file"><P>
  
<P> 

<P>
<hr>
<a href="node122.htm#Node122"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node122.htm#Node122"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node124.htm#Node124"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node122.htm#Node122"> Gather</a>
<b>Next: </b><a href="node124.htm#Node124"> Scatter</a>
<b>Previous: </b><a href="node122.htm#Node122"> Gather</a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
