<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-io/io-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title>Data Access with Explicit Offsets</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node368">15.4.2. Data Access with Explicit Offsets</span></h2>
<a href="node363.htm#Node367"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node362.htm#Node362"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node369.htm#Node369"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node362.htm#Node362"> Data Access</a>
<b>Next: </b><a href="node369.htm#Node369"> Data Access with Individual File Pointers</a>
<b>Previous: </b><a href="node363.htm#Node367"> Data Access Conventions</a>
<p>
  
  
  
  
<P> 
If <font face="sans-serif"> MPI_MODE_SEQUENTIAL</font> mode was specified when the file was opened,  
it is erroneous to call the routines in this section.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_READ_AT(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">offset</span>, <span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">status</span>)</TD></TR>  
<TR><TD> IN fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> IN offset</TD><TD>file offset (integer)</TD></TR>  
<TR><TD> OUT buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
<TR><TD> OUT status</TD><TD>status object (status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_read_at(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Status *status) <br></tt>  
  
  <tt> int MPI_File_read_at_c(MPI_File fh, MPI_Offset offset, void *buf, MPI_Count count, MPI_Datatype datatype, MPI_Status *status) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_read_at(fh, offset, buf, count, datatype, status, ierror) <br><br>TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span> <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: <span style="white-space:nowrap">offset</span> <br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">buf</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_File_read_at(fh, offset, buf, count, datatype, status, ierror) !(_c) <br><br>TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span> <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: <span style="white-space:nowrap">offset</span> <br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">buf</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_READ_AT(FH, OFFSET, BUF, COUNT, DATATYPE, STATUS, IERROR) <br><br>INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span> <br>INTEGER(KIND=MPI_OFFSET_KIND) <span style="white-space:nowrap">OFFSET</span> <br>&lt;type&gt; <span style="white-space:nowrap">BUF(*)</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_FILE_READ_AT</font> reads a file  
beginning at the position specified by <font face="sans-serif"> offset</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_READ_AT_ALL(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">offset</span>, <span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">status</span>)</TD></TR>  
<TR><TD> IN fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> IN offset</TD><TD>file offset (integer)</TD></TR>  
<TR><TD> OUT buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
<TR><TD> OUT status</TD><TD>status object (status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_read_at_all(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Status *status) <br></tt>  
  
  <tt> int MPI_File_read_at_all_c(MPI_File fh, MPI_Offset offset, void *buf, MPI_Count count, MPI_Datatype datatype, MPI_Status *status) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_read_at_all(fh, offset, buf, count, datatype, status, ierror) <br><br>TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span> <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: <span style="white-space:nowrap">offset</span> <br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">buf</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_File_read_at_all(fh, offset, buf, count, datatype, status, ierror) !(_c) <br><br>TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span> <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: <span style="white-space:nowrap">offset</span> <br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">buf</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_READ_AT_ALL(FH, OFFSET, BUF, COUNT, DATATYPE, STATUS, IERROR) <br><br>INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span> <br>INTEGER(KIND=MPI_OFFSET_KIND) <span style="white-space:nowrap">OFFSET</span> <br>&lt;type&gt; <span style="white-space:nowrap">BUF(*)</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_FILE_READ_AT_ALL</font> is a collective version  
of the blocking <font face="sans-serif"> MPI_FILE_READ_AT</font> interface.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_WRITE_AT(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">offset</span>, <span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">status</span>)</TD></TR>  
<TR><TD> INOUT fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> IN offset</TD><TD>file offset (integer)</TD></TR>  
<TR><TD> IN buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
<TR><TD> OUT status</TD><TD>status object (status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_write_at(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status) <br></tt>  
  
  <tt> int MPI_File_write_at_c(MPI_File fh, MPI_Offset offset, const void *buf, MPI_Count count, MPI_Datatype datatype, MPI_Status *status) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_write_at(fh, offset, buf, count, datatype, status, ierror) <br><br>TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span> <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: <span style="white-space:nowrap">offset</span> <br>TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">buf</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_File_write_at(fh, offset, buf, count, datatype, status, ierror) !(_c) <br><br>TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span> <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: <span style="white-space:nowrap">offset</span> <br>TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">buf</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_WRITE_AT(FH, OFFSET, BUF, COUNT, DATATYPE, STATUS, IERROR) <br><br>INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span> <br>INTEGER(KIND=MPI_OFFSET_KIND) <span style="white-space:nowrap">OFFSET</span> <br>&lt;type&gt; <span style="white-space:nowrap">BUF(*)</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_FILE_WRITE_AT</font> writes a file  
beginning at the position specified by <font face="sans-serif"> offset</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_WRITE_AT_ALL(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">offset</span>, <span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">status</span>)</TD></TR>  
<TR><TD> INOUT fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> IN offset</TD><TD>file offset (integer)</TD></TR>  
<TR><TD> IN buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
<TR><TD> OUT status</TD><TD>status object (status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_write_at_all(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status) <br></tt>  
  
  <tt> int MPI_File_write_at_all_c(MPI_File fh, MPI_Offset offset, const void *buf, MPI_Count count, MPI_Datatype datatype, MPI_Status *status) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_write_at_all(fh, offset, buf, count, datatype, status, ierror) <br><br>TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span> <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: <span style="white-space:nowrap">offset</span> <br>TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">buf</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_File_write_at_all(fh, offset, buf, count, datatype, status, ierror) !(_c) <br><br>TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span> <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: <span style="white-space:nowrap">offset</span> <br>TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">buf</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_WRITE_AT_ALL(FH, OFFSET, BUF, COUNT, DATATYPE, STATUS, IERROR) <br><br>INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span> <br>INTEGER(KIND=MPI_OFFSET_KIND) <span style="white-space:nowrap">OFFSET</span> <br>&lt;type&gt; <span style="white-space:nowrap">BUF(*)</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_FILE_WRITE_AT_ALL</font> is a collective version  
of the blocking <font face="sans-serif"> MPI_FILE_WRITE_AT</font> interface.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_IREAD_AT(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">offset</span>, <span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD> IN fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> IN offset</TD><TD>file offset (integer)</TD></TR>  
<TR><TD> OUT buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD>request object (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_iread_at(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Request *request) <br></tt>  
  
  <tt> int MPI_File_iread_at_c(MPI_File fh, MPI_Offset offset, void *buf, MPI_Count count, MPI_Datatype datatype, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_iread_at(fh, offset, buf, count, datatype, request, ierror) <br><br>TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span> <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: <span style="white-space:nowrap">offset</span> <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_File_iread_at(fh, offset, buf, count, datatype, request, ierror) !(_c) <br><br>TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span> <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: <span style="white-space:nowrap">offset</span> <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_IREAD_AT(FH, OFFSET, BUF, COUNT, DATATYPE, REQUEST, IERROR) <br><br>INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br>INTEGER(KIND=MPI_OFFSET_KIND) <span style="white-space:nowrap">OFFSET</span> <br>&lt;type&gt; <span style="white-space:nowrap">BUF(*)</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_FILE_IREAD_AT</font> is a nonblocking version  
of the <font face="sans-serif"> MPI_FILE_READ_AT</font> interface.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_IREAD_AT_ALL(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">offset</span>, <span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD> IN fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> IN offset</TD><TD>file offset (integer)</TD></TR>  
<TR><TD> OUT buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD>request object (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_iread_at_all(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Request *request) <br></tt>  
  
  <tt> int MPI_File_iread_at_all_c(MPI_File fh, MPI_Offset offset, void *buf, MPI_Count count, MPI_Datatype datatype, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_iread_at_all(fh, offset, buf, count, datatype, request, ierror) <br><br>TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span> <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: <span style="white-space:nowrap">offset</span> <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_File_iread_at_all(fh, offset, buf, count, datatype, request, ierror) !(_c) <br><br>TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span> <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: <span style="white-space:nowrap">offset</span> <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_IREAD_AT_ALL(FH, OFFSET, BUF, COUNT, DATATYPE, REQUEST, IERROR) <br><br>INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br>INTEGER(KIND=MPI_OFFSET_KIND) <span style="white-space:nowrap">OFFSET</span> <br>&lt;type&gt; <span style="white-space:nowrap">BUF(*)</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_FILE_IREAD_AT_ALL</font> is a nonblocking version of  
<font face="sans-serif"> MPI_FILE_READ_AT_ALL</font>. See  
Section <a href="node387.htm#Node387">Nonblocking Collective File Operations</a>  
for semantics of nonblocking  
collective file operations.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_IWRITE_AT(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">offset</span>, <span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD> INOUT fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> IN offset</TD><TD>file offset (integer)</TD></TR>  
<TR><TD> IN buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD>request object (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_iwrite_at(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request) <br></tt>  
  
  <tt> int MPI_File_iwrite_at_c(MPI_File fh, MPI_Offset offset, const void *buf, MPI_Count count, MPI_Datatype datatype, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_iwrite_at(fh, offset, buf, count, datatype, request, ierror) <br><br>TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span> <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: <span style="white-space:nowrap">offset</span> <br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_File_iwrite_at(fh, offset, buf, count, datatype, request, ierror) !(_c) <br><br>TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span> <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: <span style="white-space:nowrap">offset</span> <br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_IWRITE_AT(FH, OFFSET, BUF, COUNT, DATATYPE, REQUEST, IERROR) <br><br>INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br>INTEGER(KIND=MPI_OFFSET_KIND) <span style="white-space:nowrap">OFFSET</span> <br>&lt;type&gt; <span style="white-space:nowrap">BUF(*)</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_FILE_IWRITE_AT</font> is a nonblocking version  
of the <font face="sans-serif"> MPI_FILE_WRITE_AT</font> interface.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_IWRITE_AT_ALL(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">offset</span>, <span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD> INOUT fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD> IN offset</TD><TD>file offset (integer)</TD></TR>  
<TR><TD> IN buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD>request object (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_iwrite_at_all(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request) <br></tt>  
  
  <tt> int MPI_File_iwrite_at_all_c(MPI_File fh, MPI_Offset offset, const void *buf, MPI_Count count, MPI_Datatype datatype, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_iwrite_at_all(fh, offset, buf, count, datatype, request, ierror) <br><br>TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span> <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: <span style="white-space:nowrap">offset</span> <br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_File_iwrite_at_all(fh, offset, buf, count, datatype, request, ierror) !(_c) <br><br>TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span> <br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: <span style="white-space:nowrap">offset</span> <br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_IWRITE_AT_ALL(FH, OFFSET, BUF, COUNT, DATATYPE, REQUEST, IERROR) <br><br>INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br>INTEGER(KIND=MPI_OFFSET_KIND) <span style="white-space:nowrap">OFFSET</span> <br>&lt;type&gt; <span style="white-space:nowrap">BUF(*)</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_FILE_IWRITE_AT_ALL</font> is a nonblocking version of  
<font face="sans-serif"> MPI_FILE_WRITE_AT_ALL</font>.  
<P> 

<P>
<hr>
<a href="node363.htm#Node367"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node362.htm#Node362"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node369.htm#Node369"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node362.htm#Node362"> Data Access</a>
<b>Next: </b><a href="node369.htm#Node369"> Data Access with Individual File Pointers</a>
<b>Previous: </b><a href="node363.htm#Node367"> Data Access Conventions</a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
