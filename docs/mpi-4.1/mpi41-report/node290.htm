<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-dynamic/dynamic-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title>Starting Multiple Executables and Establishing Communication</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node290">12.8.3. Starting Multiple Executables and Establishing Communication</span></h2>
<a href="node289.htm#Node289"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node287.htm#Node287"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node291.htm#Node291"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node287.htm#Node287"> Process Manager Interface</a>
<b>Next: </b><a href="node291.htm#Node291"> Reserved Keys</a>
<b>Previous: </b><a href="node289.htm#Node289"> Starting Processes and Establishing Communication</a>
<p>
  
<P> 
While <font face="sans-serif"> MPI_COMM_SPAWN</font> is sufficient for most cases, it does  
not allow the spawning of multiple binaries, or of the same  
binary with multiple sets of arguments.  
The following routine spawns multiple binaries or the same binary  
with multiple sets of arguments, establishing communication with them  
and placing them in the same  <font face="sans-serif"> MPI_COMM_WORLD</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_COMM_SPAWN_MULTIPLE(<span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">array_of_commands</span>, <span style="white-space:nowrap">array_of_argv</span>, <span style="white-space:nowrap">array_of_maxprocs</span>, <span style="white-space:nowrap">array_of_info</span>, <span style="white-space:nowrap">root</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">intercomm</span>, <span style="white-space:nowrap">array_of_errcodes</span>)</TD></TR>  
<TR><TD> IN count</TD><TD>number of commands (positive integer, significant only at root)</TD></TR>  
<TR><TD> IN array_of_commands</TD><TD>programs to be executed (array of strings, significant only at root)</TD></TR>  
<TR><TD> IN array_of_argv</TD><TD>arguments for <font face="sans-serif"> commands</font> (array of array of strings, significant only at root)</TD></TR>  
<TR><TD> IN array_of_maxprocs</TD><TD>maximum number of processes to start for each command (array of integers, significant only at root)</TD></TR>  
<TR><TD> IN array_of_info</TD><TD>info objects telling the runtime system where and how to start processes (array of handles, significant only at root)</TD></TR>  
<TR><TD> IN root</TD><TD>rank of process in which previous arguments are examined (integer)</TD></TR>  
<TR><TD> IN comm</TD><TD>intra-communicator containing group of spawning processes (handle)</TD></TR>  
<TR><TD> OUT intercomm</TD><TD>inter-communicator between original group and the newly spawned group (handle)</TD></TR>  
<TR><TD> OUT array_of_errcodes</TD><TD>one error code per process (array of integers)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Comm_spawn_multiple(int count, char *array_of_commands[], char **array_of_argv[], const int array_of_maxprocs[], const MPI_Info array_of_info[], int root, MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[]) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Comm_spawn_multiple(count, array_of_commands, array_of_argv, array_of_maxprocs, array_of_info, root, comm, intercomm, array_of_errcodes, ierror) <br><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">array_of_maxprocs(*)</span>, <span style="white-space:nowrap">root</span> <br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">array_of_commands(*)</span>, <span style="white-space:nowrap">array_of_argv(count, *)</span> <br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">array_of_info(*)</span> <br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span> <br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">intercomm</span> <br>INTEGER :: <span style="white-space:nowrap">array_of_errcodes(*)</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_COMM_SPAWN_MULTIPLE(COUNT, ARRAY_OF_COMMANDS, ARRAY_OF_ARGV, ARRAY_OF_MAXPROCS, ARRAY_OF_INFO, ROOT, COMM, INTERCOMM, ARRAY_OF_ERRCODES, IERROR) <br><br>INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">ARRAY_OF_MAXPROCS(*)</span>, <span style="white-space:nowrap">ARRAY_OF_INFO(*)</span>, <span style="white-space:nowrap">ROOT</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">INTERCOMM</span>, <span style="white-space:nowrap">ARRAY_OF_ERRCODES(*)</span>, <span style="white-space:nowrap">IERROR</span> <br>CHARACTER*(*) <span style="white-space:nowrap">ARRAY_OF_COMMANDS(*)</span>, <span style="white-space:nowrap">ARRAY_OF_ARGV(COUNT, *)</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_COMM_SPAWN_MULTIPLE</font> is identical to <font face="sans-serif"> MPI_COMM_SPAWN</font> except  
that there are multiple executable specifications. The first argument,  
<font face="sans-serif"> count</font>, gives the number of specifications. Each of the  
next four arguments are simply arrays of the corresponding arguments  
in <font face="sans-serif"> MPI_COMM_SPAWN</font>.  
For the Fortran version of <font face="sans-serif"> array_of_argv</font>, the element  
<font face="sans-serif"> array_of_argv(i,j)</font> is the  
<font face="sans-serif"> j</font>-th  
argument to command number <font face="sans-serif"> i</font>.  
 
<br> 
<em> Rationale.</em>  
<P> 
This may seem backwards to  
Fortran programmers who are familiar with Fortran's  
column-major ordering. However, it is necessary to do  
it this way to allow <font face="sans-serif"> MPI_COMM_SPAWN</font> to sort out  
arguments. Note that the leading dimension of  
<font face="sans-serif"> array_of_argv</font> <em> must</em> be the same as  
<font face="sans-serif"> count</font>.  
Also note that Fortran rules for sequence association allow a different  
value in the first dimension; in this case, the sequence of array elements  
is interpreted by <font face="sans-serif"> MPI_COMM_SPAWN_MULTIPLE</font> as if the sequence  
is stored in an array defined with the first dimension set to <font face="sans-serif"> count</font>.  
This Fortran feature allows an implementor to define <font face="sans-serif"> MPI_ARGVS_NULL</font>  
(see below) with fixed dimensions, e.g., (1,1), or only with one dimension, e.g., (1).  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
The argument <font face="sans-serif"> count</font> is interpreted by <font face="sans-serif"> MPI</font> only at the root,  
as is <font face="sans-serif"> array_of_argv</font>. Since the leading dimension  
of <font face="sans-serif"> array_of_argv</font> is <font face="sans-serif"> count</font>, a nonpositive  
value of <font face="sans-serif"> count</font> at a nonroot node could theoretically  
cause a runtime bounds check error, even though  
<font face="sans-serif"> array_of_argv</font> should be ignored by the  
subroutine. If this happens, you should explicitly  
supply a reasonable value of <font face="sans-serif"> count</font> on the nonroot  
nodes.  
 (<em> End of advice to users.</em>) <br> 
In any language, an application may use the constant  
<font face="sans-serif"> MPI_ARGVS_NULL</font> (which is likely to be <tt>(char ***)0</tt> in C)  
to specify that no arguments should be passed to any  
commands. The effect of setting individual elements of <font face="sans-serif"> array_of_argv</font>  
to <font face="sans-serif"> MPI_ARGV_NULL</font> is not defined. To specify arguments  
for some commands but not others, the commands without  
arguments should have a corresponding <font face="sans-serif"> argv</font> whose  
first element is null (<tt>(char *)0</tt> in C and empty string in Fortran).  
In Fortran at nonroot processes, the <font face="sans-serif"> count</font> argument must  
be set to a value that is consistent with the provided  
<font face="sans-serif"> array_of_argv</font> although the content of these arguments  
has no meaning for this operation.  
<P> 
All of the spawned processes have the same  
<font face="sans-serif"> MPI_COMM_WORLD</font>. Their ranks in <font face="sans-serif"> MPI_COMM_WORLD</font>  
correspond directly to the order in which the commands are  
specified in <font face="sans-serif"> MPI_COMM_SPAWN_MULTIPLE</font>. Assume  
that <i>m<SUB>1</SUB></i> <font face="sans-serif"> MPI</font> processes are generated by the first command, <i>m<SUB>2</SUB></i> by  
the second, etc.  
The <font face="sans-serif"> MPI</font> processes  
corresponding to the first command have ranks <i>0, 1, ..., 
m<SUB>1</SUB>-1</i> in <font face="sans-serif"> MPI_COMM_WORLD</font>. The <font face="sans-serif"> MPI</font> processes in the second command have ranks  
<i>m<SUB>1</SUB>, m<SUB>1</SUB>+1, ..., m<SUB>1</SUB>+m<SUB>2</SUB>-1</i> in <font face="sans-serif"> MPI_COMM_WORLD</font>. The <font face="sans-serif"> MPI</font> processes in the third  
have ranks <i>m<SUB>1</SUB>+m<SUB>2</SUB>, m<SUB>1</SUB>+m<SUB>2</SUB>+1, ..., m<SUB>1</SUB>+m<SUB>2</SUB>+m<SUB>3</SUB>-1</i> in <font face="sans-serif"> MPI_COMM_WORLD</font>, etc.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Calling <font face="sans-serif"> MPI_COMM_SPAWN</font> multiple times  
would create many sets of children with different <font face="sans-serif"> MPI_COMM_WORLD</font>s  
whereas <font face="sans-serif"> MPI_COMM_SPAWN_MULTIPLE</font> creates children with  
a single <font face="sans-serif"> MPI_COMM_WORLD</font>, so the two methods  
are not completely equivalent.  
There are also two performance-related reasons why,  
if you need to spawn multiple executables, you may want to  use  
<font face="sans-serif"> MPI_COMM_SPAWN_MULTIPLE</font> instead of calling <font face="sans-serif"> MPI_COMM_SPAWN</font>  
several times. First, spawning several  
things at once may be faster than spawning them sequentially. Second,  
in some implementations,  
communication between processes spawned at the same time may be  
faster than communication between processes spawned separately.  
 (<em> End of advice to users.</em>) <br> 
The <font face="sans-serif"> array_of_errcodes</font> argument is  
a  
1-dimensional array of size <img width=88 height=25 src="img355.gif" alt="Image file">
,  
where <i>n<SUB>i</SUB></i> is the  
<i>i</i>-th  
element of <font face="sans-serif"> array_of_maxprocs</font>.  
Command number <i>i</i> corresponds to the <i>n<SUB>i</SUB></i> contiguous  
slots in this array from element <img width=77 height=30 src="img356.gif" alt="Image file">
  
to <img width=131 height=37 src="img357.gif" alt="Image file">
.  
Error codes are treated  
the same as with <font face="sans-serif"> MPI_COMM_SPAWN</font>.  
<P> 
<br><b> Example</b>  
Examples of <font face="sans-serif"> array_of_argv</font> in C and Fortran  
  
 To run the program ``ocean'' with arguments <font face="sans-serif"> ``-gridfile''</font> and  
<font face="sans-serif"> ``ocean1.grd''</font> and the program ``atmos'' with argument <font face="sans-serif"> ``atmos.grd''</font>  
in C:  
<P><img width=816 height=175 src="img358.gif" alt="Image file"><P>
Here is how you do it in Fortran:  
<P><img width=756 height=275 src="img359.gif" alt="Image file"><P>
  
<P> 

<P>
<hr>
<a href="node289.htm#Node289"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node287.htm#Node287"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node291.htm#Node291"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node287.htm#Node287"> Process Manager Interface</a>
<b>Next: </b><a href="node291.htm#Node291"> Reserved Keys</a>
<b>Previous: </b><a href="node289.htm#Node289"> Starting Processes and Establishing Communication</a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
