<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from appLang-F2008Names -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title>Process Creation and Management Fortran 2008 Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node562">21.4.9. Process Creation and Management Fortran 2008 Bindings</span></h2>
<a href="node561.htm#Node561"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node553.htm#Node553"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node563.htm#Node563"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node553.htm#Node553"> Fortran 2008 Bindings with the <tt>mpi_f08</tt> Module</a>
<b>Next: </b><a href="node563.htm#Node563"> One-Sided Communications Fortran 2008 Bindings</a>
<b>Previous: </b><a href="node561.htm#Node561"> The Info Object Fortran 2008 Bindings</a>
<p>
  <tt> MPI_Abort(comm, errorcode, ierror) <br><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">errorcode</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Close_port(port_name, ierror) <br><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">port_name</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_accept(port_name, info, root, comm, newcomm, ierror) <br><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">port_name</span> <br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">root</span> <br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span> <br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">newcomm</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_connect(port_name, info, root, comm, newcomm, ierror) <br><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">port_name</span> <br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">root</span> <br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span> <br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">newcomm</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_disconnect(comm, ierror) <br><br>TYPE(MPI_Comm), INTENT(INOUT) :: <span style="white-space:nowrap">comm</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_get_parent(parent, ierror) <br><br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">parent</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_join(fd, intercomm, ierror) <br><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">fd</span> <br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">intercomm</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_spawn(command, argv, maxprocs, info, root, comm, intercomm, array_of_errcodes, ierror) <br><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">command</span>, <span style="white-space:nowrap">argv(*)</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">maxprocs</span>, <span style="white-space:nowrap">root</span> <br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span> <br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span> <br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">intercomm</span> <br>INTEGER :: <span style="white-space:nowrap">array_of_errcodes(*)</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_spawn_multiple(count, array_of_commands, array_of_argv, array_of_maxprocs, array_of_info, root, comm, intercomm, array_of_errcodes, ierror) <br><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">array_of_maxprocs(*)</span>, <span style="white-space:nowrap">root</span> <br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">array_of_commands(*)</span>, <span style="white-space:nowrap">array_of_argv(count, *)</span> <br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">array_of_info(*)</span> <br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span> <br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">intercomm</span> <br>INTEGER :: <span style="white-space:nowrap">array_of_errcodes(*)</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Finalize(ierror) <br><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Finalized(flag, ierror) <br><br>LOGICAL, INTENT(OUT) :: <span style="white-space:nowrap">flag</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Init(ierror) <br><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Init_thread(required, provided, ierror) <br><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">required</span> <br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">provided</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Initialized(flag, ierror) <br><br>LOGICAL, INTENT(OUT) :: <span style="white-space:nowrap">flag</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Is_thread_main(flag, ierror) <br><br>LOGICAL, INTENT(OUT) :: <span style="white-space:nowrap">flag</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Lookup_name(service_name, info, port_name, ierror) <br><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">service_name</span> <br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span> <br>CHARACTER(LEN=MPI_MAX_PORT_NAME), INTENT(OUT) :: <span style="white-space:nowrap">port_name</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Open_port(info, port_name, ierror) <br><br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span> <br>CHARACTER(LEN=MPI_MAX_PORT_NAME), INTENT(OUT) :: <span style="white-space:nowrap">port_name</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Publish_name(service_name, info, port_name, ierror) <br><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">service_name</span>, <span style="white-space:nowrap">port_name</span> <br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Query_thread(provided, ierror) <br><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">provided</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Session_finalize(session, ierror) <br><br>TYPE(MPI_Session), INTENT(INOUT) :: <span style="white-space:nowrap">session</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Session_get_info(session, info_used, ierror) <br><br>TYPE(MPI_Session), INTENT(IN) :: <span style="white-space:nowrap">session</span> <br>TYPE(MPI_Info), INTENT(OUT) :: <span style="white-space:nowrap">info_used</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Session_get_nth_pset(session, info, n, pset_len, pset_name, ierror) <br><br>TYPE(MPI_Session), INTENT(IN) :: <span style="white-space:nowrap">session</span> <br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">n</span> <br>INTEGER, INTENT(INOUT) :: <span style="white-space:nowrap">pset_len</span> <br>CHARACTER(LEN=*), INTENT(OUT) :: <span style="white-space:nowrap">pset_name</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Session_get_num_psets(session, info, npset_names, ierror) <br><br>TYPE(MPI_Session), INTENT(IN) :: <span style="white-space:nowrap">session</span> <br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span> <br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">npset_names</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Session_get_pset_info(session, pset_name, info, ierror) <br><br>TYPE(MPI_Session), INTENT(IN) :: <span style="white-space:nowrap">session</span> <br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">pset_name</span> <br>TYPE(MPI_Info), INTENT(OUT) :: <span style="white-space:nowrap">info</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Session_init(info, errhandler, session, ierror) <br><br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span> <br>TYPE(MPI_Errhandler), INTENT(IN) :: <span style="white-space:nowrap">errhandler</span> <br>TYPE(MPI_Session), INTENT(OUT) :: <span style="white-space:nowrap">session</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Unpublish_name(service_name, info, port_name, ierror) <br><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">service_name</span>, <span style="white-space:nowrap">port_name</span> <br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
<P> 

<P>
<hr>
<a href="node561.htm#Node561"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node553.htm#Node553"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node563.htm#Node563"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node553.htm#Node553"> Fortran 2008 Bindings with the <tt>mpi_f08</tt> Module</a>
<b>Next: </b><a href="node563.htm#Node563"> One-Sided Communications Fortran 2008 Bindings</a>
<b>Previous: </b><a href="node561.htm#Node561"> The Info Object Fortran 2008 Bindings</a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
