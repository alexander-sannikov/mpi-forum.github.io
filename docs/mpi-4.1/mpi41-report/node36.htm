<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-terms/terms-2 -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title>Named Constants</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node36">3.5.4. Named Constants</span></h2>
<a href="node35.htm#Node35"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node32.htm#Node32"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node37.htm#Node37"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node32.htm#Node32"> Datatypes</a>
<b>Next: </b><a href="node37.htm#Node37"> Choice</a>
<b>Previous: </b><a href="node35.htm#Node35"> State</a>
<p>
  
  
<P> 
<font face="sans-serif"> MPI</font> procedures sometimes assign a special meaning to a special value of a  
basic type argument; e.g., <font face="sans-serif"> tag</font> is an integer-valued argument of  
point-to-point communication operations, with a special wild-card  
value, <font face="sans-serif"> MPI_ANY_TAG</font>.  
Such arguments will have a range of regular values, which is a proper  
subrange  
of the range of values of the corresponding basic type;  
special values (such as <font face="sans-serif"> MPI_ANY_TAG</font>)  
will be outside the regular range.  
The range of regular values, such as <font face="sans-serif"> tag</font>, can  
be queried using environmental inquiry  
functions, see Chapter <a href="node242.htm#Node242"><font face="sans-serif"> MPI</font> Environmental Management</a>.  
The range of other values, such as <font face="sans-serif"> source</font>, depends on values given by  
other <font face="sans-serif"> MPI</font> routines (in the case of <font face="sans-serif"> source</font> it is the communicator  
size).  
<P> 
<font face="sans-serif"> MPI</font> also provides predefined named constant handles, such as  
<font face="sans-serif"> MPI_COMM_WORLD</font>.  
<P> 
All named <font face="sans-serif"> MPI</font>  
constants, with the exceptions noted below for Fortran, can be used in  
initialization expressions or assignments.  
Opaque objects accessed by constant  
handles are defined and do not change value between <font face="sans-serif"> MPI</font> initialization  
(e.g., with <font face="sans-serif"> MPI_INIT</font>) and <font face="sans-serif"> MPI</font> finalization (e.g., with <font face="sans-serif"> MPI_FINALIZE</font>).  
The handles themselves are constants and can be also used in initialization expressions or assignments.  
<P> 
In C, all named <font face="sans-serif"> MPI</font> constants that are described as ``integer constant expression'' in Section <a href="node520.htm#Node520">Defined Constants</a> must be implemented  
as <em> C integer constant expressions</em> of the specified integer type.  
All other <font face="sans-serif"> MPI</font> constants in C are not required to be <em> C integer constant expressions</em> but must be usable in initialization expressions and assignments.  
Thus, they are not guaranteed to be usable in array declarations or as case-labels in <tt>switch</tt> statements.  
<P> 
In Fortran, all named <font face="sans-serif"> MPI</font> constants (with the exceptions below) must be declared with the <tt>PARAMETER</tt> attribute.  
<P> 
  
<P> 
 The constants that cannot be used in initialization expressions or  
assignments in Fortran are as follows:  
<P> 
<P><img width=253 height=261 src="img4.gif" alt="Image file"><P>
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
In Fortran the implementation of these special constants may require the  
use of language constructs that are outside the Fortran  
standard. Using special values for the constants (e.g., by defining  
them through <tt>PARAMETER</tt> statements) is not possible because an  
implementation cannot distinguish these values from valid  
data. Typically, these constants are implemented as predefined  
static variables (e.g., a variable in an <font face="sans-serif"> MPI</font>-declared <tt>COMMON</tt>  
block), relying on the fact that the target compiler passes data by  
address.  Inside the subroutine, this address can be extracted by some  
mechanism outside the Fortran standard (e.g., by Fortran extensions or  
by implementing the function in C).  
 (<em> End of advice to implementors.</em>) <br> 

<P>
<hr>
<a href="node35.htm#Node35"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node32.htm#Node32"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node37.htm#Node37"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node32.htm#Node32"> Datatypes</a>
<b>Next: </b><a href="node37.htm#Node37"> Choice</a>
<b>Previous: </b><a href="node35.htm#Node35"> State</a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
