<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-io/io-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title>Examples</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node393">15.6.11. Examples</span></h2>
<a href="node392.htm#Node392"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node382.htm#Node382"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node393.htm#Node394"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node382.htm#Node382"> Consistency and Semantics</a>
<b>Next: </b><a href="node393.htm#Node394"> Asynchronous I/O</a>
<b>Previous: </b><a href="node392.htm#Node392"> File Size</a>
<p>
  
<P> 
The examples in this section illustrate  
the application of the <font face="sans-serif"> MPI</font> consistency and semantics guarantees.  
These address  
<ul> 
 
<li>conflicting accesses on file handles obtained from a   
single collective open, and  
 
<li>all accesses on file handles obtained from two separate  
collective opens.  
</ul> 
<br> 
The simplest way to achieve consistency for conflicting accesses is  
to obtain sequential consistency by setting atomic mode.  
<br><b> Example</b>  
  
  
For the code below,  
process 1 will read either 0 or 10 integers.  
If the latter, every element of <tt>b</tt> will be <tt>5</tt>.  
If nonatomic mode is set, the results of the read are undefined.  
<P> 
<P><img width=854 height=349 src="img424.gif" alt="Image file"><P>
<P><img width=854 height=250 src="img425.gif" alt="Image file"><P>
A user may guarantee that the write on process <font face="sans-serif"> 0</font>  
precedes the read on process <font face="sans-serif"> 1</font> by imposing temporal order  
with, for example, calls to <font face="sans-serif"> MPI_BARRIER</font>.  
  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Routines other than <font face="sans-serif"> MPI_BARRIER</font> may be used to impose   
temporal order.  In the example above, process 0 could use <font face="sans-serif"> MPI_SEND</font>  
to send a 0 byte message, received by process 1 using <font face="sans-serif"> MPI_RECV</font>.  
 (<em> End of advice to users.</em>) <br> 
<br><b> Example</b>  
  
  
Alternatively, a user can impose consistency with nonatomic mode set:  
<P> 
<P><img width=854 height=299 src="img426.gif" alt="Image file"><P>
<P><img width=854 height=250 src="img427.gif" alt="Image file"><P>
The ``sync-barrier-sync'' construct is required because:  
<ul> 
 
<li>The barrier ensures that the write on process 0 occurs  
before the read on process 1.  
 
<li>The first sync guarantees that the data written by all  
processes is transferred to the storage device.    
 
<li>The second sync guarantees that all data that has been  
transferred to the storage device is visible to all processes.  
(This does not affect process 0 in this example.)  
</ul> 
<br> 
  
<P> 
<br><b> Example</b>  
  
  
The following program represents an erroneous attempt to achieve consistency  
by eliminating the apparently superfluous second ``sync'' call for  
each process.  
<P><img width=854 height=324 src="img428.gif" alt="Image file"><P>
<P><img width=854 height=275 src="img429.gif" alt="Image file"><P>
The above program also violates the <font face="sans-serif"> MPI</font> rule  
against out-of-order collective operations  
and  
will deadlock for implementations in which <font face="sans-serif"> MPI_FILE_SYNC</font> blocks.  
  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Some implementations may choose to implement <font face="sans-serif"> MPI_FILE_SYNC</font>  
as a temporally synchronizing function.  When using such an  
implementation, the ``sync-barrier-sync'' construct above can  
be replaced by a single ``sync.''  The results of using such  
code with an implementation for which <font face="sans-serif"> MPI_FILE_SYNC</font> is not  
temporally synchronizing is undefined.  
 (<em> End of advice to users.</em>) <br> 
<ul> 
</ul> 

<P>
<hr>
<a href="node392.htm#Node392"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node382.htm#Node382"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node393.htm#Node394"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node382.htm#Node382"> Consistency and Semantics</a>
<b>Next: </b><a href="node393.htm#Node394"> Asynchronous I/O</a>
<b>Previous: </b><a href="node392.htm#Node392"> File Size</a>
<p>
<hr><h3><span id="Node394">15.6.11.1. Asynchronous I/O</span></h3>
<a href="node393.htm#Node393"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node393.htm#Node393"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node395.htm#Node395"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node393.htm#Node393"> Examples</a>
<b>Next: </b><a href="node395.htm#Node395"> I/O Error Handling</a>
<b>Previous: </b><a href="node393.htm#Node393"> Examples</a>
<p>
The behavior of asynchronous I/O operations is determined by  
applying the rules specified above for synchronous I/O operations.  
<P> 
<br><b> Example</b>  
  
  
The following examples all access a preexisting file ``<tt>myfile</tt>.''  
Word <font face="sans-serif"> 10</font> in myfile initially contains the integer <font face="sans-serif"> 2</font>.  
Each example writes and reads word <font face="sans-serif"> 10</font>.  
<P> 
First consider the following code fragment:  
<P><img width=869 height=200 src="img430.gif" alt="Image file"><P>
For asynchronous data access operations, <font face="sans-serif"> MPI</font> specifies   
that the access occurs at any time between the call to the asynchronous   
data access routine and the return from the corresponding   
request complete routine.  
Thus, executing either the read before the write,  
or the write before the read is consistent with program order.  
If atomic mode is set, then <font face="sans-serif"> MPI</font> guarantees sequential   
consistency, and the program will read either <tt>2</tt> or  
<tt>4</tt> into <tt>b</tt>.  
If atomic mode is not set, then sequential consistency is not   
guaranteed and the program may read something other than <tt>2</tt>  
or <tt>4</tt> due to the conflicting data access.  
<P> 
Similarly, the following code fragment does not order file accesses:  
<P><img width=869 height=225 src="img431.gif" alt="Image file"><P>
If atomic mode is set, either <tt>2</tt> or <tt>4</tt> will be read  
into <tt>b</tt>.  Again, <font face="sans-serif"> MPI</font> does not guarantee sequential consistency  
in nonatomic mode.  
<P> 
On the other hand, the following code fragment:  
<P><img width=841 height=200 src="img432.gif" alt="Image file"><P>
defines the same ordering as:  
<P><img width=841 height=150 src="img433.gif" alt="Image file"><P>
Since  
<ul> 
 
<li>nonconcurrent operations on a single file handle are sequentially consistent, and  
 
<li>the program fragments specify an order for the operations,  
</ul> 
<br> 
<font face="sans-serif"> MPI</font> guarantees that both program fragments will read the value   
<tt>4</tt> into  
<tt>b</tt>.  There is no need to set atomic mode for this example.  
<P> 
Similar considerations apply to conflicting accesses of the form:  
<P><img width=729 height=75 src="img434.gif" alt="Image file"><P>
In addition, as mentioned in Section <a href="node387.htm#Node387">Nonblocking Collective File Operations</a>,  
nonblocking collective I/O  
operations have to be called in the same order on the file handle by all  
processes.  
<P> 
Similar considerations apply to conflicting accesses of the form:  
<P><img width=729 height=100 src="img435.gif" alt="Image file"><P>
Recall that constraints governing consistency and semantics are not  
relevant to the following:  
<P><img width=729 height=100 src="img436.gif" alt="Image file"><P>
since split collective operations on the same file handle may not overlap  
(see Section <a href="node374.htm#Node374">Split Collective Data Access Routines</a>).  
  
<P> 

<P>
<hr>
<a href="node393.htm#Node393"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node393.htm#Node393"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node395.htm#Node395"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node393.htm#Node393"> Examples</a>
<b>Next: </b><a href="node395.htm#Node395"> I/O Error Handling</a>
<b>Previous: </b><a href="node393.htm#Node393"> Examples</a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
