<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-pt2pt/pt2pt-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title>Introduction</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node54">4.1. Introduction</span></h1>
<a href="node53.htm#Node53"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node53.htm#Node53"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node55.htm#Node55"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node53.htm#Node53"> Point-to-Point Communication</a>
<b>Next: </b><a href="node55.htm#Node55"> Blocking Send and Receive Operations</a>
<b>Previous: </b><a href="node53.htm#Node53"> Point-to-Point Communication</a>
<p>
  
<P> 
Sending and receiving of <em> messages</em> by <font face="sans-serif"> MPI</font> processes is the basic <font face="sans-serif"> MPI</font>  
communication mechanism.  
The basic point-to-point communication operations are <em> send</em> and  
<em> receive</em>.  Their use is illustrated in Example <a href="node54.htm#Node54">Introduction</a>.  
<P> 
<br><b> Example</b>  
  
A simple `hello world' example usage of point-to-point communication.  
<P> 
<P><img width=866 height=549 src="img7.gif" alt="Image file"><P>
  
<P> 
In Example <a href="node54.htm#Node54">Introduction</a>, process zero (<tt>myrank = 0</tt>, strictly `the <font face="sans-serif"> MPI</font> process with rank <tt>0</tt> in communicator <font face="sans-serif"> MPI_COMM_WORLD</font>') sends a <em> message</em> to process one  
using the  
<em> send</em> operation <font face="sans-serif"> MPI_SEND</font>. The  
operation specifies a <em> send buffer</em> in the sender memory from which the  
<em> message data</em> is taken.  In the example above, the send buffer consists of the  
storage containing the variable <tt>message</tt> in the memory of process zero.  
The location, size and type of the send buffer are specified by the first three  
parameters of the send operation.  The message sent will contain the 13  
characters of this variable.  
In addition, the send operation associates an <em> envelope</em> with the  
message.  This <em> envelope</em> specifies the message destination and contains  
distinguishing information that can be used by the <em> receive</em> operation to  
select a particular message.  
The last three parameters of the send operation, along with the rank of the  
sender,  
specify the <em> envelope</em> for the message sent.  
<P> 
Process one (<tt>myrank = 1</tt>, strictly `the <font face="sans-serif"> MPI</font> process with rank <tt>1</tt> in communicator <font face="sans-serif"> MPI_COMM_WORLD</font>') receives this message with the  
<em> receive</em> operation <font face="sans-serif"> MPI_RECV</font>.  
The message to be received is selected according to the value of its  
<em> envelope</em>, and the <em> message data</em> is stored into the  
<em> receive buffer</em>.  
In the example above, the receive buffer consists of the storage  
containing the string <tt>message</tt> in the memory of process one.  
The first three parameters of the receive operation specify the location, size  
and type of the receive buffer.  The next three  
parameters are used for selecting the incoming message.  The last parameter is  
used to return information on the message just received.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Colloquial usage commonly permits references to ``rank 0'' or ``process 0'',  
 which are strictly ambiguous and ideally should be qualified by including  
 the relevant context, for example, the <font face="sans-serif"> MPI</font> communicator in the case above.  
 (<em> End of advice to users.</em>) <br> 
The next sections describe the blocking send and receive  
operations.  We discuss send, receive, blocking communication semantics,  
type matching requirements, type conversion in  
heterogeneous environments, and more general communication modes.  
Nonblocking communication is addressed next, followed by  
probing and cancelling a message,  
channel-like constructs and send-receive operations,  
ending with a description of the  
``dummy'' <font face="sans-serif"> MPI</font> process, <font face="sans-serif"> MPI_PROC_NULL</font>.  
<P> 

<P>
<hr>
<a href="node53.htm#Node53"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node53.htm#Node53"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node55.htm#Node55"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node53.htm#Node53"> Point-to-Point Communication</a>
<b>Next: </b><a href="node55.htm#Node55"> Blocking Send and Receive Operations</a>
<b>Previous: </b><a href="node53.htm#Node53"> Point-to-Point Communication</a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
