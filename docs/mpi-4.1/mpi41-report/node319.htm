<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-one-side/one-side-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title>Examples for Communication Calls</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node319">13.3.3. Examples for Communication Calls</span></h2>
<a href="node318.htm#Node318"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node316.htm#Node316"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node320.htm#Node320"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node316.htm#Node316"> Communication Calls</a>
<b>Next: </b><a href="node320.htm#Node320"> Accumulate Functions</a>
<b>Previous: </b><a href="node318.htm#Node318"> Get</a>
<p>
  
<P> 
These examples show the use of the <font face="sans-serif"> MPI_GET</font> procedure.  
  As all <font face="sans-serif"> MPI</font> <font face="sans-serif"> RMA</font> communication procedures are nonblocking, the associated operations  
  must be completed by subsequent calls to synchronization procedures.  
  In the following example, completion is accomplished with the  
  routine <font face="sans-serif"> MPI_WIN_FENCE</font>, introduced in  
  Section <a href="node327.htm#Node327">Synchronization Calls</a>.  
<P> 
<br><b> Example</b>  
  
We show how to implement the generic indirect assignment  
<tt>A = B(map)</tt>, where <tt>A</tt>,  
<tt>B</tt>, and   
<tt>map</tt> have the same  
distribution, and <tt>map</tt> is a permutation.  To simplify, we assume  
a block distribution with equal size   
blocks.  
<P> 
<P><img width=862 height=1408 src="img370.gif" alt="Image file"><P>
  
<P> 
<br><b> Example</b>  
  
A simpler version can be written that does not require that a  
datatype be built for the target buffer.  One then needs a  
separate get operation for each entry,  
as illustrated below.  This code is much simpler, but usually much less  
efficient, for large arrays.  
<P> 
<P><img width=893 height=573 src="img371.gif" alt="Image file"><P>
  
<P> 

<P>
<hr>
<a href="node318.htm#Node318"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node316.htm#Node316"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node320.htm#Node320"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node316.htm#Node316"> Communication Calls</a>
<b>Next: </b><a href="node320.htm#Node320"> Accumulate Functions</a>
<b>Previous: </b><a href="node318.htm#Node318"> Get</a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
