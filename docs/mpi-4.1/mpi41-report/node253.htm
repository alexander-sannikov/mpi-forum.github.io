<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-inquiry/inquiry-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title>Error Handlers for Communicators</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node253">10.3.1. Error Handlers for Communicators</span></h2>
<a href="node252.htm#Node252"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node252.htm#Node252"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node254.htm#Node254"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node252.htm#Node252"> Error Handling</a>
<b>Next: </b><a href="node254.htm#Node254"> Error Handlers for Windows</a>
<b>Previous: </b><a href="node252.htm#Node252"> Error Handling</a>
<p>
  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_COMM_CREATE_ERRHANDLER(<span style="white-space:nowrap">comm_errhandler_fn</span>, <span style="white-space:nowrap">errhandler</span>)</TD></TR>  
<TR><TD> IN comm_errhandler_fn</TD><TD>user defined error handling procedure (function)</TD></TR>  
<TR><TD> OUT errhandler</TD><TD><font face="sans-serif"> MPI</font> error handler (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Comm_create_errhandler(MPI_Comm_errhandler_function *comm_errhandler_fn, MPI_Errhandler *errhandler) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Comm_create_errhandler(comm_errhandler_fn, errhandler, ierror) <br><br>PROCEDURE(MPI_Comm_errhandler_function) :: <span style="white-space:nowrap">comm_errhandler_fn</span> <br>TYPE(MPI_Errhandler), INTENT(OUT) :: <span style="white-space:nowrap">errhandler</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_COMM_CREATE_ERRHANDLER(COMM_ERRHANDLER_FN, ERRHANDLER, IERROR) <br><br>EXTERNAL <span style="white-space:nowrap">COMM_ERRHANDLER_FN</span> <br>INTEGER <span style="white-space:nowrap">ERRHANDLER</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Creates an error handler that can be attached to communicators.  
<P> 
The user routine should be, in C, a  
function of type  
<font face="sans-serif"> MPI_Comm_errhandler_function</font>, which is defined as  
<P> 
 <tt> typedef void MPI_Comm_errhandler_function(MPI_Comm *comm, int *error_code, ...); <br></tt>  
<P> 
The first argument is the communicator in use.  
The second is  
the error code to be returned by the <font face="sans-serif"> MPI</font> routine that raised the error.  
If the routine would have returned <font face="sans-serif"> MPI_ERR_IN_STATUS</font>, it is  
the error code returned in the status for the request that caused the  
error handler to be invoked.  
The remaining arguments are ``<tt>varargs</tt>'' arguments  
whose number and meaning is implementationdependent.  An implementation  
should clearly document these arguments.  
Addresses are used so that the handler may be written in Fortran.  
<P> 
  
With the Fortran <tt>mpi_f08</tt> module, the user routine <font face="sans-serif"> comm_errhandler_fn</font> should be of the form:  
 <P> 
<tt> ABSTRACT INTERFACE<br>&nbsp;&nbsp;&nbsp; <tt> SUBROUTINE MPI_Comm_errhandler_function(comm, error_code) <br><br>TYPE(MPI_Comm) :: <span style="white-space:nowrap">comm</span> <br>INTEGER :: <span style="white-space:nowrap">error_code</span> <br></tt></tt>  
<P> 
  
With the Fortran <tt>mpi</tt> module and (deprecated) <tt>mpif.h</tt> include file,  
the user routine <font face="sans-serif"> COMM_ERRHANDLER_FN</font> should be of the form:  
<P> 
 <tt> SUBROUTINE COMM_ERRHANDLER_FUNCTION(COMM, ERROR_CODE) <br><br>INTEGER <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">ERROR_CODE</span> <br></tt>  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The variable argument list is provided because it provides an  
ISO-standard  
hook for providing additional information to the error  
handler; without this hook,   
ISO C   
prohibits additional arguments.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
A newly  
created communicator inherits the error  
handler that is associated with the ``parent'' communicator.  
In particular, the user can specify a ``global'' error handler for  
all communicators by  
associating this handler with the communicator <font face="sans-serif"> MPI_COMM_WORLD</font>  
immediately after initialization.  
 (<em> End of advice to users.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_COMM_SET_ERRHANDLER(<span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">errhandler</span>)</TD></TR>  
<TR><TD> INOUT comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> IN errhandler</TD><TD>new error handler for communicator (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Comm_set_errhandler(MPI_Comm comm, MPI_Errhandler errhandler) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Comm_set_errhandler(comm, errhandler, ierror) <br><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span> <br>TYPE(MPI_Errhandler), INTENT(IN) :: <span style="white-space:nowrap">errhandler</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_COMM_SET_ERRHANDLER(COMM, ERRHANDLER, IERROR) <br><br>INTEGER <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">ERRHANDLER</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Attaches a new error handler to a communicator.  
The error handler must be either a predefined error  
handler, or an error handler created by a call to  
<font face="sans-serif"> MPI_COMM_CREATE_ERRHANDLER</font>.    
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_COMM_GET_ERRHANDLER(<span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">errhandler</span>)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT errhandler</TD><TD>error handler currently associated with communicator (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Comm_get_errhandler(MPI_Comm comm, MPI_Errhandler *errhandler) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Comm_get_errhandler(comm, errhandler, ierror) <br><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span> <br>TYPE(MPI_Errhandler), INTENT(OUT) :: <span style="white-space:nowrap">errhandler</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_COMM_GET_ERRHANDLER(COMM, ERRHANDLER, IERROR) <br><br>INTEGER <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">ERRHANDLER</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Retrieves the error handler currently associated with a communicator.  
For example, a  
library function may register at its entry point the current error  
handler for a  
communicator, set its own private error handler for this communicator, and  
restore before exiting the previous error handler.  
<P> 

<P>
<hr>
<a href="node252.htm#Node252"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node252.htm#Node252"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node254.htm#Node254"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node252.htm#Node252"> Error Handling</a>
<b>Next: </b><a href="node254.htm#Node254"> Error Handlers for Windows</a>
<b>Previous: </b><a href="node252.htm#Node252"> Error Handling</a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
