<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-dynamic/dynamic-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title>Runtime Query Functions</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node274">12.3.3. Runtime Query Functions</span></h2>
<a href="node273.htm#Node273"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node271.htm#Node271"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node275.htm#Node275"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node271.htm#Node271"> The Sessions Model</a>
<b>Next: </b><a href="node275.htm#Node275"> Sessions Model Examples</a>
<b>Previous: </b><a href="node273.htm#Node273"> Processes Sets</a>
<p>
<TABLE><TR><TD COLSPAN=2>MPI_SESSION_GET_NUM_PSETS(<span style="white-space:nowrap">session</span>, <span style="white-space:nowrap">info</span>, <span style="white-space:nowrap">npset_names</span>)</TD></TR>  
<TR><TD> IN session</TD><TD>session (handle)</TD></TR>  
<TR><TD> IN info</TD><TD>info object (handle)</TD></TR>  
<TR><TD> OUT npset_names</TD><TD>number of available process sets (non-negative integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Session_get_num_psets(MPI_Session session, MPI_Info info, int *npset_names) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Session_get_num_psets(session, info, npset_names, ierror) <br><br>TYPE(MPI_Session), INTENT(IN) :: <span style="white-space:nowrap">session</span> <br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span> <br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">npset_names</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_SESSION_GET_NUM_PSETS(SESSION, INFO, NPSET_NAMES, IERROR) <br><br>INTEGER <span style="white-space:nowrap">SESSION</span>, <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">NPSET_NAMES</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
This function is used to query the runtime for the number of available process sets in which the calling <font face="sans-serif"> MPI</font> process is a member.  
An <font face="sans-serif"> MPI</font> implementation is allowed to increase the number of available process sets  
during the execution of an <font face="sans-serif"> MPI</font> application when new process sets become available.  
However, <font face="sans-serif"> MPI</font> implementations are not allowed  
to change the index of a particular process set name,  
or to change the name of the process set at a particular index,  
or to delete a process set name once it has been added.  
When a process set becomes invalid,  
for example, when some processes become unreachable due to failures in the communication system,  
subsequent usage of the process set name should raise an error.  
For example, creating an <font face="sans-serif"> MPI_Group</font> from such a process set might succeed because it is a local operation,  
but creating an <font face="sans-serif"> MPI_Comm</font> from that group and attempting collective communication  
should raise an error.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
It is anticipated that an <font face="sans-serif"> MPI</font> implementation may be relying on an external runtime system to provide process sets.  
Such runtime systems may have the ability to dynamically create process sets during the course of application execution.  
Requiring the number of process sets returned by <font face="sans-serif"> MPI_SESSION_GET_NUM_PSETS</font>  
to be constant over the course of application execution would prevent an application from taking advantage of such capabilities.  
 (<em> End of advice to implementors.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_SESSION_GET_NTH_PSET(<span style="white-space:nowrap">session</span>, <span style="white-space:nowrap">info</span>, <span style="white-space:nowrap">n</span>, <span style="white-space:nowrap">pset_len</span>, <span style="white-space:nowrap">pset_name</span>)</TD></TR>  
<TR><TD> IN session</TD><TD>session (handle)</TD></TR>  
<TR><TD> IN info</TD><TD>info object (handle)</TD></TR>  
<TR><TD> IN n</TD><TD>index of the desired process set name (integer)</TD></TR>  
<TR><TD> INOUT pset_len</TD><TD>length of the pset_name argument (integer)</TD></TR>  
<TR><TD> OUT pset_name</TD><TD>name of the <font face="sans-serif"> n</font>th process set (string)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Session_get_nth_pset(MPI_Session session, MPI_Info info, int n, int *pset_len, char *pset_name) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Session_get_nth_pset(session, info, n, pset_len, pset_name, ierror) <br><br>TYPE(MPI_Session), INTENT(IN) :: <span style="white-space:nowrap">session</span> <br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">n</span> <br>INTEGER, INTENT(INOUT) :: <span style="white-space:nowrap">pset_len</span> <br>CHARACTER(LEN=*), INTENT(OUT) :: <span style="white-space:nowrap">pset_name</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_SESSION_GET_NTH_PSET(SESSION, INFO, N, PSET_LEN, PSET_NAME, IERROR) <br><br>INTEGER <span style="white-space:nowrap">SESSION</span>, <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">N</span>, <span style="white-space:nowrap">PSET_LEN</span>, <span style="white-space:nowrap">IERROR</span> <br>CHARACTER*(*) <span style="white-space:nowrap">PSET_NAME</span> <br></tt>  
<P> 
This function returns the name of the <font face="sans-serif"> n</font>th process set in the supplied <font face="sans-serif"> pset_name</font> buffer.  
<font face="sans-serif"> pset_len</font> is the size of the buffer needed to store the <font face="sans-serif"> n</font>th process set name.  If the <font face="sans-serif"> pset_len</font> passed  
into the function is less than the actual buffer size needed for the process set name,  
then the string value returned in <font face="sans-serif"> pset_name</font> is truncated.  
If <font face="sans-serif"> pset_len</font> is set to 0, <font face="sans-serif"> pset_name</font> is not changed.  On return, the value of <font face="sans-serif"> pset_len</font> will be set  
to the required buffer size to hold the process set name.  In C, <font face="sans-serif"> pset_len</font> includes the required space for the null terminator.  
In C, this function returns a null terminated string in all cases where the <font face="sans-serif"> pset_len</font> input value is greater than 0.  
<P> 
If two <font face="sans-serif"> MPI</font> processes get the same process set name, then the intersection of the two process sets shall either be the empty set or identical to the union of the two process sets.  
<P> 
After a successful call to <font face="sans-serif"> MPI_SESSION_GET_NTH_PSET</font>, subsequent calls to routines that query information about the same process set name and same session handle must return the same information. An <font face="sans-serif"> MPI</font> implementation is not allowed to alter any of the returned process set names.  
<P> 
Process set names have an implementation-defined maximum length of <font face="sans-serif"> MPI_MAX_PSET_NAME_LEN</font> characters.  <font face="sans-serif"> MPI_MAX_PSET_NAME_LEN</font> shall have a value of at least 63.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
<font face="sans-serif"> MPI_MAX_PSET_NAME_LEN</font> might be very large, so it  
might not be wise to declare a string of that size.  
Users are encouraged to use <font face="sans-serif"> MPI_SESSION_GET_NTH_PSET</font>  
both for obtaining the length of a <font face="sans-serif"> pset_name</font> and the process set name.  
 (<em> End of advice to users.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_SESSION_GET_INFO(<span style="white-space:nowrap">session</span>, <span style="white-space:nowrap">info_used</span>)</TD></TR>  
<TR><TD> IN session</TD><TD>session (handle)</TD></TR>  
<TR><TD> OUT info_used</TD><TD>see explanation below (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Session_get_info(MPI_Session session, MPI_Info *info_used) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Session_get_info(session, info_used, ierror) <br><br>TYPE(MPI_Session), INTENT(IN) :: <span style="white-space:nowrap">session</span> <br>TYPE(MPI_Info), INTENT(OUT) :: <span style="white-space:nowrap">info_used</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_SESSION_GET_INFO(SESSION, INFO_USED, IERROR) <br><br>INTEGER <span style="white-space:nowrap">SESSION</span>, <span style="white-space:nowrap">INFO_USED</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_SESSION_GET_INFO</font> returns a new info object containing  
the hints of the <font face="sans-serif"> MPI</font> Session  associated with <font face="sans-serif"> session</font>.  
The current setting of all hints related to this <font face="sans-serif"> MPI</font> Session is  
returned in <font face="sans-serif"> info_used</font>.  An <font face="sans-serif"> MPI</font> implementation is required to  
return all hints that are supported by the implementation and have  
default values specified; any user-supplied hints that were not ignored  
by the implementation; and any additional hints that were set by  
the implementation.  
If no such hints  
exist, a handle to a newly created info object is returned that  
contains no key/value pair.  
The user is responsible for freeing  
<font face="sans-serif"> info_used</font> via <font face="sans-serif"> MPI_INFO_FREE</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_SESSION_GET_PSET_INFO(<span style="white-space:nowrap">session</span>, <span style="white-space:nowrap">pset_name</span>, <span style="white-space:nowrap">info</span>)</TD></TR>  
<TR><TD> IN session</TD><TD>session (handle)</TD></TR>  
<TR><TD> IN pset_name</TD><TD>name of process set (string)</TD></TR>  
<TR><TD> OUT info</TD><TD>info object containing information about the given process set (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Session_get_pset_info(MPI_Session session, const char *pset_name, MPI_Info *info) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Session_get_pset_info(session, pset_name, info, ierror) <br><br>TYPE(MPI_Session), INTENT(IN) :: <span style="white-space:nowrap">session</span> <br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">pset_name</span> <br>TYPE(MPI_Info), INTENT(OUT) :: <span style="white-space:nowrap">info</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_SESSION_GET_PSET_INFO(SESSION, PSET_NAME, INFO, IERROR) <br><br>INTEGER <span style="white-space:nowrap">SESSION</span>, <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">IERROR</span> <br>CHARACTER*(*) <span style="white-space:nowrap">PSET_NAME</span> <br></tt>  
<P> 
This function is used to query properties of a specific process set.  
The returned <font face="sans-serif"> info</font> object can be queried with existing <font face="sans-serif"> MPI</font> info object query functions.  
One key/value pair must be defined, <font face="sans-serif"> mpi_size</font>.  
The value of the <font face="sans-serif"> mpi_size</font> key specifies the number of <font face="sans-serif"> MPI</font> processes in the process set.  
The user is responsible for freeing the returned <font face="sans-serif"> MPI_Info</font> object.  
<P> 

<P>
<hr>
<a href="node273.htm#Node273"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node271.htm#Node271"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node275.htm#Node275"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node271.htm#Node271"> The Sessions Model</a>
<b>Next: </b><a href="node275.htm#Node275"> Sessions Model Examples</a>
<b>Previous: </b><a href="node273.htm#Node273"> Processes Sets</a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
