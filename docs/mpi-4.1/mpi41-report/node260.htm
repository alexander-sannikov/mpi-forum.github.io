<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-inquiry/inquiry-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title>User-Defined Error Classes and Codes</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node260">10.5.1. User-Defined Error Classes and Codes</span></h2>
<a href="node259.htm#Node259"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node259.htm#Node259"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node261.htm#Node261"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node259.htm#Node259"> Error Classes, Error Codes, and Error Handlers</a>
<b>Next: </b><a href="node261.htm#Node261"> Calling Error Handlers</a>
<b>Previous: </b><a href="node259.htm#Node259"> Error Classes, Error Codes, and Error Handlers</a>
<p>
The procedures that add and remove error classes, codes, or strings are thread-safe,  
as defined in Section <a href="node281.htm#Node281"><font face="sans-serif"> MPI</font> and Threads</a>.  
They are some of the few <font face="sans-serif"> MPI</font> procedures that may be called before <font face="sans-serif"> MPI</font> is  
initialized or after <font face="sans-serif"> MPI</font> is finalized, as defined in Section <a href="node277.htm#Node277"><font face="sans-serif"> MPI</font> Functionality that is Always Available</a>.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Note that despite the procedures being thread-safe, some concurrent calls can result  
in undefined behavior. Notably, the rules mandating that a call adding an error  
class/code/string must precede a call that removes that error class/code/string apply even  
when the procedures are called from different threads. Calling the procedures with different  
input values for the class/code parameters is always thread-safe.  
 (<em> End of advice to users.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_ADD_ERROR_CLASS(<span style="white-space:nowrap">errorclass</span>)</TD></TR>  
<TR><TD> OUT errorclass</TD><TD>value for the new error class (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Add_error_class(int *errorclass) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Add_error_class(errorclass, ierror) <br><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">errorclass</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_ADD_ERROR_CLASS(ERRORCLASS, IERROR) <br><br>INTEGER <span style="white-space:nowrap">ERRORCLASS</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Creates a new error class and returns the value for it.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
To avoid conflicts with existing error codes and classes, the value is  
set by the implementation and not by the user.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Since a call to <font face="sans-serif"> MPI_ADD_ERROR_CLASS</font> is local, the same  
<font face="sans-serif"> errorclass</font> may not be returned on all processes that make  
this call.  Thus, it is not safe to assume that registering a new  
error on a set of processes at the same time will yield the same  
<font face="sans-serif"> errorclass</font> on all of the processes. Getting the ``same''  
error on multiple processes may not cause the same value of error  
code to be generated.  
 (<em> End of advice to users.</em>) <br> 
The value of <font face="sans-serif"> MPI_ERR_LASTCODE</font>  
is a constant value and   
is not affected by new user-defined  
error codes and classes.    
Instead, when using the World Model (Section <a href="node266.htm#Node266">The World Model</a>), a predefined attribute key <font face="sans-serif"> MPI_LASTUSEDCODE</font> is  
associated with  
<font face="sans-serif"> MPI_COMM_WORLD</font>.  The attribute value corresponding to this key  
is the current maximum error class including the user-defined ones.  
This is a local value and may be different on different processes.    
The value returned by this key is always greater than or equal to  
<font face="sans-serif"> MPI_ERR_LASTCODE</font>.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
The value returned by the key  
<font face="sans-serif"> MPI_LASTUSEDCODE</font> will not change unless the user calls a  
procedure to explicitly add or remove an error class/code.  In a multithreaded  
environment, the user must take extra care in assuming this value has  
not changed.  
Note that error codes and error classes are not necessarily dense.  A user may not assume that each error class below <font face="sans-serif"> MPI_LASTUSEDCODE</font> is valid.  
 (<em> End of advice to users.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_REMOVE_ERROR_CLASS(<span style="white-space:nowrap">errorclass</span>)</TD></TR>  
<TR><TD> IN errorclass</TD><TD>value for the error class to remove (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Remove_error_class(int errorclass) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Remove_error_class(errorclass, ierror) <br><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">errorclass</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_REMOVE_ERROR_CLASS(ERRORCLASS, IERROR) <br><br>INTEGER <span style="white-space:nowrap">ERRORCLASS</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Removes a user-created error class.  
<P> 
The value of the predefined attribute key <font face="sans-serif"> MPI_LASTUSEDCODE</font> associated with  
<font face="sans-serif"> MPI_COMM_WORLD</font> is updated to reflect the maximum error class value. Note that there may be  
unused error classes that have a smaller value than <font face="sans-serif"> MPI_LASTUSEDCODE</font>.  
<P> 
It is erroneous to call <font face="sans-serif"> MPI_REMOVE_ERROR_CLASS</font> with a value for  
<font face="sans-serif"> errorclass</font> that was not added by a call to <font face="sans-serif"> MPI_ADD_ERROR_CLASS</font>. Once an  
<font face="sans-serif"> errorclass</font> is removed by calling <font face="sans-serif"> MPI_REMOVE_ERROR_CLASS</font>, it is erroneous to  
remove it again without first obtaining the value from another call to <font face="sans-serif"> MPI_ADD_ERROR_CLASS</font>.  
It is erroneous to remove an error class when its associated error codes have not been removed before.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_ADD_ERROR_CODE(<span style="white-space:nowrap">errorclass</span>, <span style="white-space:nowrap">errorcode</span>)</TD></TR>  
<TR><TD> IN errorclass</TD><TD>error class (integer)</TD></TR>  
<TR><TD> OUT errorcode</TD><TD>new error code to be associated with <font face="sans-serif"> errorclass</font> (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Add_error_code(int errorclass, int *errorcode) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Add_error_code(errorclass, errorcode, ierror) <br><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">errorclass</span> <br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">errorcode</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_ADD_ERROR_CODE(ERRORCLASS, ERRORCODE, IERROR) <br><br>INTEGER <span style="white-space:nowrap">ERRORCLASS</span>, <span style="white-space:nowrap">ERRORCODE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Creates new error code associated with  
<font face="sans-serif"> errorclass</font> and returns its value in <font face="sans-serif"> errorcode</font>.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
To avoid conflicts with existing error codes and classes, the value  
of the new error code is set by the implementation and not by the  
user.   
 (<em> End of rationale.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_REMOVE_ERROR_CODE(<span style="white-space:nowrap">errorcode</span>)</TD></TR>  
<TR><TD> IN errorcode</TD><TD>error code to be removed (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Remove_error_code(int errorcode) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Remove_error_code(errorcode, ierror) <br><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">errorcode</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_REMOVE_ERROR_CODE(ERRORCODE, IERROR) <br><br>INTEGER <span style="white-space:nowrap">ERRORCODE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Removes a user-created error code and all its associations with any error class.  
<P> 
It is erroneous to call <font face="sans-serif"> MPI_REMOVE_ERROR_CODE</font> with a value for  
<font face="sans-serif"> errorcode</font> that was not added by a call to <font face="sans-serif"> MPI_ADD_ERROR_CODE</font>. Once an  
<font face="sans-serif"> errorcode</font> is removed by calling <font face="sans-serif"> MPI_REMOVE_ERROR_CODE</font>, it is erroneous to  
remove it again without first obtaining the value from another call to <font face="sans-serif"> MPI_ADD_ERROR_CODE</font>.  
It is erroneous to remove an error code when its associated error string has not been removed before.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_ADD_ERROR_STRING(<span style="white-space:nowrap">errorcode</span>, <span style="white-space:nowrap">string</span>)</TD></TR>  
<TR><TD> IN errorcode</TD><TD>error code or class (integer)</TD></TR>  
<TR><TD> IN string</TD><TD>text corresponding to <font face="sans-serif"> errorcode</font> (string)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Add_error_string(int errorcode, const char *string) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Add_error_string(errorcode, string, ierror) <br><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">errorcode</span> <br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">string</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_ADD_ERROR_STRING(ERRORCODE, STRING, IERROR) <br><br>INTEGER <span style="white-space:nowrap">ERRORCODE</span>, <span style="white-space:nowrap">IERROR</span> <br>CHARACTER*(*) <span style="white-space:nowrap">STRING</span> <br></tt>  
<P> 
Associates a user-defined error string with an error code or class.  
The string must be no more than <font face="sans-serif"> MPI_MAX_ERROR_STRING</font>  
characters long.  The length of the string is as defined in the  
calling language.    
The length of the string does not include the null terminator in C.  
Trailing blanks will be stripped in Fortran.  
Calling <font face="sans-serif"> MPI_ADD_ERROR_STRING</font> for an <font face="sans-serif"> errorcode</font>  
that already has a string will replace the old string with the new  
string.  It is erroneous to call <font face="sans-serif"> MPI_ADD_ERROR_STRING</font> for  
an error code or class with a value <i>&ge; errorMPI_ERR_LASTCODE</i>.  
<P> 
If <font face="sans-serif"> MPI_ERROR_STRING</font> is called when no string has been set,  
it will return a empty string (all spaces in Fortran, <tt>""</tt> in C).  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_REMOVE_ERROR_STRING(<span style="white-space:nowrap">errorcode</span>)</TD></TR>  
<TR><TD> IN errorcode</TD><TD>error code or class (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Remove_error_string(int errorcode) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Remove_error_string(errorcode, ierror) <br><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">errorcode</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_REMOVE_ERROR_STRING(ERRORCODE, IERROR) <br><br>INTEGER <span style="white-space:nowrap">ERRORCODE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Removes a user-defined association of an error string with an error code or class.  
<P> 
It is erroneous to call <font face="sans-serif"> MPI_REMOVE_ERROR_STRING</font> with a value for  
<font face="sans-serif"> errorcode</font> that does not have an error string added by a call to  
<font face="sans-serif"> MPI_ADD_ERROR_STRING</font>.  
<P> 

<P>
<hr>
<a href="node259.htm#Node259"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node259.htm#Node259"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node261.htm#Node261"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node259.htm#Node259"> Error Classes, Error Codes, and Error Handlers</a>
<b>Next: </b><a href="node261.htm#Node261"> Calling Error Handlers</a>
<b>Previous: </b><a href="node259.htm#Node259"> Error Classes, Error Codes, and Error Handlers</a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
