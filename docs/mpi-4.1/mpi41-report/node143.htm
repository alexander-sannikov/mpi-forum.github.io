<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-coll/coll-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title>Exclusive Scan</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node143">7.11.2. Exclusive Scan</span></h2>
<a href="node142.htm#Node142"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node141.htm#Node141"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node144.htm#Node144"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node141.htm#Node141"> Scan</a>
<b>Next: </b><a href="node144.htm#Node144"> Example using <font face="sans-serif"> MPI_SCAN</font></a>
<b>Previous: </b><a href="node142.htm#Node142"> Inclusive Scan</a>
<p>
  
  
<TABLE><TR><TD COLSPAN=2>MPI_EXSCAN(<span style="white-space:nowrap">sendbuf</span>, <span style="white-space:nowrap">recvbuf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">op</span>, <span style="white-space:nowrap">comm</span>)</TD></TR>  
<TR><TD> IN sendbuf</TD><TD>starting address of send buffer (choice)</TD></TR>  
<TR><TD> OUT recvbuf</TD><TD>starting address of receive buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in input buffer (non-negative integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of elements of input buffer (handle)</TD></TR>  
<TR><TD> IN op</TD><TD>operation (handle)</TD></TR>  
<TR><TD> IN comm</TD><TD>intra-communicator (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Exscan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm) <br></tt>  
  
  <tt> int MPI_Exscan_c(const void *sendbuf, void *recvbuf, MPI_Count count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Exscan(sendbuf, recvbuf, count, datatype, op, comm, ierror) <br><br>TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span> <br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(MPI_Op), INTENT(IN) :: <span style="white-space:nowrap">op</span> <br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Exscan(sendbuf, recvbuf, count, datatype, op, comm, ierror) !(_c) <br><br>TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span> <br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(MPI_Op), INTENT(IN) :: <span style="white-space:nowrap">op</span> <br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_EXSCAN(SENDBUF, RECVBUF, COUNT, DATATYPE, OP, COMM, IERROR) <br><br>&lt;type&gt; <span style="white-space:nowrap">SENDBUF(*)</span>, <span style="white-space:nowrap">RECVBUF(*)</span> <br>INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">OP</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
If <font face="sans-serif"> comm</font> is an intra-communicator,  
<font face="sans-serif"> MPI_EXSCAN</font> is used to perform a prefix reduction on data distributed  
across the group.   
The value in <font face="sans-serif"> recvbuf</font> on the <font face="sans-serif"> MPI</font> process with rank <font face="sans-serif"> 0</font> is undefined, and <font face="sans-serif"> recvbuf</font> is not signficant on that <font face="sans-serif"> MPI</font> process.  
The value in <font face="sans-serif"> recvbuf</font> on the <font face="sans-serif"> MPI</font> process with rank <font face="sans-serif"> 1</font> is defined as  
the value in <font face="sans-serif"> sendbuf</font> on the <font face="sans-serif"> MPI</font> process with rank <font face="sans-serif"> 0</font>.  
For <font face="sans-serif"> MPI</font> processes with rank <i>i &gt; 1</i>, the operation returns, in the  
receive buffer of the   
<font face="sans-serif"> MPI</font> process with rank <i>i</i>, the reduction of the values in the send buffers  
of <font face="sans-serif"> MPI</font> processes with ranks <i>0,...,i-1</i> (inclusive).  
The routine is called by all group members using  
the same arguments for <font face="sans-serif"> count</font>, <font face="sans-serif"> datatype</font>, <font face="sans-serif"> op</font>   
and <font face="sans-serif"> comm</font>, except that for  
user-defined operations, the same rules apply as for  
<font face="sans-serif"> MPI_REDUCE</font>. The type of operations supported, their semantics,  
and the constraints on send and receive buffers, are as for  
<font face="sans-serif"> MPI_REDUCE</font>.    
<P> 
The ``in place'' option for intra-communicators is specified by passing <font face="sans-serif"> MPI_IN_PLACE</font> in the <font face="sans-serif"> sendbuf</font> argument.  
In this case, the input data is taken from the receive buffer, and replaced by the output data.  
The receive buffer on rank 0 is not changed by this operation.  
<P> 
This operation is invalid for inter-communicators.  
 
<br> 
<em> Rationale.</em>  
<P> 
The exclusive scan is more general than the inclusive scan.  
Any inclusive scan operation can be  
achieved by using the exclusive scan and then locally combining the  
local contribution.  Note that for noninvertable operations such as  
<font face="sans-serif"> MPI_MAX</font>, the exclusive scan cannot be computed with the  
inclusive scan.    
 (<em> End of rationale.</em>) <br> 

<P>
<hr>
<a href="node142.htm#Node142"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node141.htm#Node141"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node144.htm#Node144"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node141.htm#Node141"> Scan</a>
<b>Next: </b><a href="node144.htm#Node144"> Example using <font face="sans-serif"> MPI_SCAN</font></a>
<b>Previous: </b><a href="node142.htm#Node142"> Inclusive Scan</a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
