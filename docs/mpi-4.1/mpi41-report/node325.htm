<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-one-side/one-side-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title>Request-based <font face="sans-serif"> RMA</font> Communication Operations</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node325">13.3.5. Request-based  RMA Communication Operations</span></h2>
<a href="node320.htm#Node324"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node316.htm#Node316"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node326.htm#Node326"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node316.htm#Node316"> Communication Calls</a>
<b>Next: </b><a href="node326.htm#Node326"> Memory Model</a>
<b>Previous: </b><a href="node320.htm#Node324"> Compare and Swap</a>
<p>
  
  
<P> 
Request-based <font face="sans-serif"> RMA</font> communication operations allow the user to  
associate a request handle with the <font face="sans-serif"> RMA</font> operations and test or wait  
for the completion of these requests using the functions described in  
Section <a href="node74.htm#Node74">Communication Completion</a>. Request-based <font face="sans-serif"> RMA</font> operations  
are only valid within a passive target  
epoch (see Section <a href="node327.htm#Node327">Synchronization Calls</a>).   
<P> 
Upon returning from a completion call in which an <font face="sans-serif"> RMA</font> operation  
completes, all fields of the status object, if any, and the results of status query  
functions (e.g., <font face="sans-serif"> MPI_GET_COUNT</font>) are undefined with the  
exception of <font face="sans-serif"> MPI_ERROR</font> if appropriate (see  
Section <a href="node60.htm#Node60">Return Status</a>). It is  
valid to mix different request types (e.g., any combination of <font face="sans-serif"> RMA</font>  
requests, collective requests, I/O requests, generalized requests, or  
point-to-point requests) in functions that enable multiple completions  
(e.g., <font face="sans-serif"> MPI_WAITALL</font>). It is erroneous to call  
<font face="sans-serif"> MPI_REQUEST_FREE</font> or <font face="sans-serif"> MPI_CANCEL</font> for a request  
associated with an <font face="sans-serif"> RMA</font> operation. <font face="sans-serif"> RMA</font> requests are not persistent.  
<P> 
The closing of the epoch, or explicit bulk synchronization using  
<font face="sans-serif"> MPI_WIN_FLUSH</font>, <font face="sans-serif"> MPI_WIN_FLUSH_ALL</font>,  
<font face="sans-serif"> MPI_WIN_FLUSH_LOCAL</font>, or  
<font face="sans-serif"> MPI_WIN_FLUSH_LOCAL_ALL</font>, also indicates completion of  
request-based <font face="sans-serif"> RMA</font> operations on the specified window. However, users must still free the request by testing, waiting,  
or calling <font face="sans-serif"> MPI_REQUEST_FREE</font> on the <font face="sans-serif"> request</font> handle to allow  
the <font face="sans-serif"> MPI</font> implementation to release any resources associated with these requests.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_RPUT(<span style="white-space:nowrap">origin_addr</span>, <span style="white-space:nowrap">origin_count</span>, <span style="white-space:nowrap">origin_datatype</span>, <span style="white-space:nowrap">target_rank</span>, <span style="white-space:nowrap">target_disp</span>, <span style="white-space:nowrap">target_count</span>, <span style="white-space:nowrap">target_datatype</span>, <span style="white-space:nowrap">win</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD> IN origin_addr</TD><TD>initial address of origin buffer (choice)</TD></TR>  
<TR><TD> IN origin_count</TD><TD>number of entries in origin buffer (non-negative integer)</TD></TR>  
<TR><TD> IN origin_datatype</TD><TD>datatype of each entry in origin buffer (handle)</TD></TR>  
<TR><TD> IN target_rank</TD><TD>rank of target (non-negative integer)</TD></TR>  
<TR><TD> IN target_disp</TD><TD>displacement from start of window to target buffer (non-negative integer)</TD></TR>  
<TR><TD> IN target_count</TD><TD>number of entries in target buffer (non-negative integer)</TD></TR>  
<TR><TD> IN target_datatype</TD><TD>datatype of each entry in target buffer (handle)</TD></TR>  
<TR><TD> IN win</TD><TD>window used for communication (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD><font face="sans-serif"> RMA</font> request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Rput(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win, MPI_Request *request) <br></tt>  
  
  <tt> int MPI_Rput_c(const void *origin_addr, MPI_Count origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, MPI_Count target_count, MPI_Datatype target_datatype, MPI_Win win, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Rput(origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request, ierror) <br><br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">origin_addr</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">origin_count</span>, <span style="white-space:nowrap">target_rank</span>, <span style="white-space:nowrap">target_count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">origin_datatype</span>, <span style="white-space:nowrap">target_datatype</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">target_disp</span> <br>TYPE(MPI_Win), INTENT(IN) :: <span style="white-space:nowrap">win</span> <br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Rput(origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request, ierror) !(_c) <br><br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">origin_addr</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">origin_count</span>, <span style="white-space:nowrap">target_count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">origin_datatype</span>, <span style="white-space:nowrap">target_datatype</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">target_rank</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">target_disp</span> <br>TYPE(MPI_Win), INTENT(IN) :: <span style="white-space:nowrap">win</span> <br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_RPUT(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, WIN, REQUEST, IERROR) <br><br>&lt;type&gt; <span style="white-space:nowrap">ORIGIN_ADDR(*)</span> <br>INTEGER <span style="white-space:nowrap">ORIGIN_COUNT</span>, <span style="white-space:nowrap">ORIGIN_DATATYPE</span>, <span style="white-space:nowrap">TARGET_RANK</span>, <span style="white-space:nowrap">TARGET_COUNT</span>, <span style="white-space:nowrap">TARGET_DATATYPE</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">TARGET_DISP</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_RPUT</font> is similar to <font face="sans-serif"> MPI_PUT</font>  
(Section <a href="node317.htm#Node317">Put</a>), except that it  
allocates a communication request object and associates it with the  
request handle (the argument <font face="sans-serif"> request</font>). The completion of the  
operation at the origin (i.e., after the corresponding test or wait) indicates that the sender is now free to  
update the locations in the origin buffer. It does not indicate that  
the data is available at the target window. If remote completion is  
required, <font face="sans-serif"> MPI_WIN_FLUSH</font>, <font face="sans-serif"> MPI_WIN_FLUSH_ALL</font>,  
<font face="sans-serif"> MPI_WIN_UNLOCK</font>, or  
<font face="sans-serif"> MPI_WIN_UNLOCK_ALL</font> can be used.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_RGET(<span style="white-space:nowrap">origin_addr</span>, <span style="white-space:nowrap">origin_count</span>, <span style="white-space:nowrap">origin_datatype</span>, <span style="white-space:nowrap">target_rank</span>, <span style="white-space:nowrap">target_disp</span>, <span style="white-space:nowrap">target_count</span>, <span style="white-space:nowrap">target_datatype</span>, <span style="white-space:nowrap">win</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD> OUT origin_addr</TD><TD>initial address of origin buffer (choice)</TD></TR>  
<TR><TD> IN origin_count</TD><TD>number of entries in origin buffer (non-negative integer)</TD></TR>  
<TR><TD> IN origin_datatype</TD><TD>datatype of each entry in origin buffer (handle)</TD></TR>  
<TR><TD> IN target_rank</TD><TD>rank of target (non-negative integer)</TD></TR>  
<TR><TD> IN target_disp</TD><TD>displacement from window start to the beginning of the target buffer (non-negative integer)</TD></TR>  
<TR><TD> IN target_count</TD><TD>number of entries in target buffer (non-negative integer)</TD></TR>  
<TR><TD> IN target_datatype</TD><TD>datatype of each entry in target buffer (handle)</TD></TR>  
<TR><TD> IN win</TD><TD>window used for communication (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD><font face="sans-serif"> RMA</font> request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Rget(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win, MPI_Request *request) <br></tt>  
  
  <tt> int MPI_Rget_c(void *origin_addr, MPI_Count origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, MPI_Count target_count, MPI_Datatype target_datatype, MPI_Win win, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Rget(origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request, ierror) <br><br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">origin_addr</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">origin_count</span>, <span style="white-space:nowrap">target_rank</span>, <span style="white-space:nowrap">target_count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">origin_datatype</span>, <span style="white-space:nowrap">target_datatype</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">target_disp</span> <br>TYPE(MPI_Win), INTENT(IN) :: <span style="white-space:nowrap">win</span> <br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Rget(origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request, ierror) !(_c) <br><br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">origin_addr</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">origin_count</span>, <span style="white-space:nowrap">target_count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">origin_datatype</span>, <span style="white-space:nowrap">target_datatype</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">target_rank</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">target_disp</span> <br>TYPE(MPI_Win), INTENT(IN) :: <span style="white-space:nowrap">win</span> <br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_RGET(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, WIN, REQUEST, IERROR) <br><br>&lt;type&gt; <span style="white-space:nowrap">ORIGIN_ADDR(*)</span> <br>INTEGER <span style="white-space:nowrap">ORIGIN_COUNT</span>, <span style="white-space:nowrap">ORIGIN_DATATYPE</span>, <span style="white-space:nowrap">TARGET_RANK</span>, <span style="white-space:nowrap">TARGET_COUNT</span>, <span style="white-space:nowrap">TARGET_DATATYPE</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">TARGET_DISP</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_RGET</font> is similar to <font face="sans-serif"> MPI_GET</font>  
(Section <a href="node318.htm#Node318">Get</a>), except that it  
allocates a communication request object and associates it with the  
request handle (the argument <font face="sans-serif"> request</font>) that can be used to wait  
or test for completion of the operation at the origin, which indicates that the  
data is available in the origin buffer. If  
<font face="sans-serif"> origin_addr</font> points to memory attached to a window, then the  
data becomes available in the private copy of this window.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_RACCUMULATE(<span style="white-space:nowrap">origin_addr</span>, <span style="white-space:nowrap">origin_count</span>, <span style="white-space:nowrap">origin_datatype</span>, <span style="white-space:nowrap">target_rank</span>, <span style="white-space:nowrap">target_disp</span>, <span style="white-space:nowrap">target_count</span>, <span style="white-space:nowrap">target_datatype</span>, <span style="white-space:nowrap">op</span>, <span style="white-space:nowrap">win</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD> IN origin_addr</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD> IN origin_count</TD><TD>number of entries in buffer (non-negative integer)</TD></TR>  
<TR><TD> IN origin_datatype</TD><TD>datatype of each entry in origin buffer (handle)</TD></TR>  
<TR><TD> IN target_rank</TD><TD>rank of target (non-negative integer)</TD></TR>  
<TR><TD> IN target_disp</TD><TD>displacement from start of window to beginning of target buffer (non-negative integer)</TD></TR>  
<TR><TD> IN target_count</TD><TD>number of entries in target buffer (non-negative integer)</TD></TR>  
<TR><TD> IN target_datatype</TD><TD>datatype of each entry in target buffer (handle)</TD></TR>  
<TR><TD> IN op</TD><TD>accumulate operator (handle)</TD></TR>  
<TR><TD> IN win</TD><TD>window object (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD><font face="sans-serif"> RMA</font> request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Raccumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request *request) <br></tt>  
  
  <tt> int MPI_Raccumulate_c(const void *origin_addr, MPI_Count origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, MPI_Count target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Raccumulate(origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request, ierror) <br><br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">origin_addr</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">origin_count</span>, <span style="white-space:nowrap">target_rank</span>, <span style="white-space:nowrap">target_count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">origin_datatype</span>, <span style="white-space:nowrap">target_datatype</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">target_disp</span> <br>TYPE(MPI_Op), INTENT(IN) :: <span style="white-space:nowrap">op</span> <br>TYPE(MPI_Win), INTENT(IN) :: <span style="white-space:nowrap">win</span> <br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Raccumulate(origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request, ierror) !(_c) <br><br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">origin_addr</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">origin_count</span>, <span style="white-space:nowrap">target_count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">origin_datatype</span>, <span style="white-space:nowrap">target_datatype</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">target_rank</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">target_disp</span> <br>TYPE(MPI_Op), INTENT(IN) :: <span style="white-space:nowrap">op</span> <br>TYPE(MPI_Win), INTENT(IN) :: <span style="white-space:nowrap">win</span> <br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_RACCUMULATE(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, OP, WIN, REQUEST, IERROR) <br><br>&lt;type&gt; <span style="white-space:nowrap">ORIGIN_ADDR(*)</span> <br>INTEGER <span style="white-space:nowrap">ORIGIN_COUNT</span>, <span style="white-space:nowrap">ORIGIN_DATATYPE</span>, <span style="white-space:nowrap">TARGET_RANK</span>, <span style="white-space:nowrap">TARGET_COUNT</span>, <span style="white-space:nowrap">TARGET_DATATYPE</span>, <span style="white-space:nowrap">OP</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">TARGET_DISP</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_RACCUMULATE</font> is similar to <font face="sans-serif"> MPI_ACCUMULATE</font>  
(Section <a href="node320.htm#Node320">Accumulate Functions</a>),  
except that it allocates a communication request object and associates  
it with the request handle (the argument <font face="sans-serif"> request</font>) that can be  
used to wait or test for completion. The completion of the  
operation at the origin (i.e., after the corresponding test or wait) indicates that the origin buffer  
is free to be updated. It does not indicate that the operation has  
completed at the target window.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_RGET_ACCUMULATE(<span style="white-space:nowrap">origin_addr</span>, <span style="white-space:nowrap">origin_count</span>, <span style="white-space:nowrap">origin_datatype</span>, <span style="white-space:nowrap">result_addr</span>, <span style="white-space:nowrap">result_count</span>, <span style="white-space:nowrap">result_datatype</span>, <span style="white-space:nowrap">target_rank</span>, <span style="white-space:nowrap">target_disp</span>, <span style="white-space:nowrap">target_count</span>, <span style="white-space:nowrap">target_datatype</span>, <span style="white-space:nowrap">op</span>, <span style="white-space:nowrap">win</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD> IN origin_addr</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD> IN origin_count</TD><TD>number of entries in origin buffer (non-negative integer)</TD></TR>  
<TR><TD> IN origin_datatype</TD><TD>datatype of each entry in origin buffer (handle)</TD></TR>  
<TR><TD> OUT result_addr</TD><TD>initial address of result buffer (choice)</TD></TR>  
<TR><TD> IN result_count</TD><TD>number of entries in result buffer (non-negative integer)</TD></TR>  
<TR><TD> IN result_datatype</TD><TD>datatype of entries in result buffer (handle)</TD></TR>  
<TR><TD> IN target_rank</TD><TD>rank of target (non-negative integer)</TD></TR>  
<TR><TD> IN target_disp</TD><TD>displacement from start of window to beginning of target buffer (non-negative integer)</TD></TR>  
<TR><TD> IN target_count</TD><TD>number of entries in target buffer (non-negative integer)</TD></TR>  
<TR><TD> IN target_datatype</TD><TD>datatype of each entry in target buffer (handle)</TD></TR>  
<TR><TD> IN op</TD><TD>accumulate operator (handle)</TD></TR>  
<TR><TD> IN win</TD><TD>window object (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD><font face="sans-serif"> RMA</font> request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Rget_accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, void *result_addr, int result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request *request) <br></tt>  
  
  <tt> int MPI_Rget_accumulate_c(const void *origin_addr, MPI_Count origin_count, MPI_Datatype origin_datatype, void *result_addr, MPI_Count result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, MPI_Count target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Rget_accumulate(origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request, ierror) <br><br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">origin_addr</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">origin_count</span>, <span style="white-space:nowrap">result_count</span>, <span style="white-space:nowrap">target_rank</span>, <span style="white-space:nowrap">target_count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">origin_datatype</span>, <span style="white-space:nowrap">result_datatype</span>, <span style="white-space:nowrap">target_datatype</span> <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">result_addr</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">target_disp</span> <br>TYPE(MPI_Op), INTENT(IN) :: <span style="white-space:nowrap">op</span> <br>TYPE(MPI_Win), INTENT(IN) :: <span style="white-space:nowrap">win</span> <br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Rget_accumulate(origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request, ierror) !(_c) <br><br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">origin_addr</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">origin_count</span>, <span style="white-space:nowrap">result_count</span>, <span style="white-space:nowrap">target_count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">origin_datatype</span>, <span style="white-space:nowrap">result_datatype</span>, <span style="white-space:nowrap">target_datatype</span> <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">result_addr</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">target_rank</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">target_disp</span> <br>TYPE(MPI_Op), INTENT(IN) :: <span style="white-space:nowrap">op</span> <br>TYPE(MPI_Win), INTENT(IN) :: <span style="white-space:nowrap">win</span> <br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_RGET_ACCUMULATE(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, RESULT_ADDR, RESULT_COUNT, RESULT_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, OP, WIN, REQUEST, IERROR) <br><br>&lt;type&gt; <span style="white-space:nowrap">ORIGIN_ADDR(*)</span>, <span style="white-space:nowrap">RESULT_ADDR(*)</span> <br>INTEGER <span style="white-space:nowrap">ORIGIN_COUNT</span>, <span style="white-space:nowrap">ORIGIN_DATATYPE</span>, <span style="white-space:nowrap">RESULT_COUNT</span>, <span style="white-space:nowrap">RESULT_DATATYPE</span>, <span style="white-space:nowrap">TARGET_RANK</span>, <span style="white-space:nowrap">TARGET_COUNT</span>, <span style="white-space:nowrap">TARGET_DATATYPE</span>, <span style="white-space:nowrap">OP</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">TARGET_DISP</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_RGET_ACCUMULATE</font> is similar to  
<font face="sans-serif"> MPI_GET_ACCUMULATE</font> (Section <a href="node320.htm#Node322">Get Accumulate</a>), except that it allocates a  
communication request object and associates it with the request handle  
(the argument <font face="sans-serif"> request</font>) that can be used to wait or test for  
completion. The completion of the  
operation at the origin (i.e., after the corresponding test or wait)  
indicates that the data is available in the result buffer  
and the origin buffer is free to be updated. It does not indicate that  
the operation has been completed at the target window.  
<P> 

<P>
<hr>
<a href="node320.htm#Node324"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node316.htm#Node316"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node326.htm#Node326"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node316.htm#Node316"> Communication Calls</a>
<b>Next: </b><a href="node326.htm#Node326"> Memory Model</a>
<b>Previous: </b><a href="node320.htm#Node324"> Compare and Swap</a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
