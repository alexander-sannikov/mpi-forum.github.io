<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-binding/binding-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title>Temporary Data Movement and Temporary Memory Modification</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node496">20.1.18. Temporary Data Movement and Temporary Memory Modification</span></h2>
<a href="node484.htm#Node495"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node464.htm#Node464"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node497.htm#Node497"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node464.htm#Node464"> Support for Fortran</a>
<b>Next: </b><a href="node497.htm#Node497"> Permanent Data Movement</a>
<b>Previous: </b><a href="node484.htm#Node495"> The Fortran <tt> TARGET</tt> Attribute</a>
<p>
  
<P> 
The compiler is allowed to temporarily modify data in memory.  
Normally, this problem may occur only when overlapping communication and computation,  
as in Example <a href="node484.htm#Node489">Solutions</a>, Case (b) on page <a href="node484.htm#Node489">Solutions</a>.  
Example <a href="node496.htm#Node496">Temporary Data Movement and Temporary Memory Modification</a>  
also shows a possibility  
that could be problematic.  
<P> 
<br><b> Example</b>  
Overlapping Communication and Computation.  
  
<P><img width=729 height=225 src="img482.gif" alt="Image file"><P>
  
<P> 
<br><b> Example</b>  
The compiler may substitute the nested loops through loop fusion.  
  
<P><img width=729 height=225 src="img483.gif" alt="Image file"><P>
  
<P> 
<br><b> Example</b>  
Another optimization is based on the usage of a separate memory storage area, e.g., in a GPU.  
  
<P><img width=729 height=275 src="img484.gif" alt="Image file"><P>
  
<P> 
In the compiler-generated, possible optimization in Example <a href="node496.htm#Node496">Temporary Data Movement and Temporary Memory Modification</a>,  
<font face="sans-serif"> buf(100,100)</font> from Example <a href="node496.htm#Node496">Temporary Data Movement and Temporary Memory Modification</a>  
is equivalenced with the  1-dimensional array <font face="sans-serif"> buf_1dim(10000)</font>.  
The nonblocking receive may asynchronously receive the data in the boundary <font face="sans-serif"> buf(1,1:100)</font>  
while the fused loop is temporarily using this part of the buffer.  
When the <font face="sans-serif"> tmp</font> data is written back to <font face="sans-serif"> buf</font>,  
the previous data of <font face="sans-serif"> buf(1,1:100)</font> is restored  
and the received data is lost.  
The principle behind this optimization is that  
the receive buffer data <font face="sans-serif"> buf(1,1:100)</font> was temporarily moved to <font face="sans-serif"> tmp</font>.  
<P> 
Example <a href="node496.htm#Node496">Temporary Data Movement and Temporary Memory Modification</a> shows  
a second possible optimization.  
The whole array is temporarily moved to <font face="sans-serif"> local_buf</font>.  
<P> 
When storing <font face="sans-serif"> local_buf</font> back to the original location buf,  
then this implies overwriting the section of <font face="sans-serif"> buf</font> that serves  
as a receive buffer in the nonblocking <font face="sans-serif"> MPI</font> call, i.e., this storing  
back of <font face="sans-serif"> local_buf</font> is therefore likely to interfere with  
asynchronously received data in <font face="sans-serif"> buf(1,1:100)</font>.  
<P> 
Note that this problem may also occur:  
<ul> 
 
<li>With the local buffer at the origin process,  
between an <font face="sans-serif"> RMA</font> communication call and the ensuing synchronization call;  
see Chapter <a href="node306.htm#Node306">One-Sided Communications</a>.  
 
<li>With the window buffer at the target process  
between two ensuing <font face="sans-serif"> RMA</font> synchronization calls.  
 
<li>With the local buffer in <font face="sans-serif"> MPI</font> parallel file I/O split collective operations  
between the <font face="sans-serif"> MPI_</font><font face="sans-serif"> XXX</font>_BEGIN</font> and <font face="sans-serif"> MPI_</font><font face="sans-serif"> XXX</font>_END</font> calls;  
see Section <a href="node374.htm#Node374">Split Collective Data Access Routines</a>.  
</ul> 
<br> 
As already mentioned in Section <a href="node484.htm#Node490">The Fortran <tt> ASYNCHRONOUS</tt> Attributebute</a>  
on page <a href="node484.htm#Node490">The Fortran <tt> ASYNCHRONOUS</tt> Attributebute</a> of  
Section <a href="node484.htm#Node484">Problems with Code Movement and Register Optimization</a>,  
the <tt> ASYNCHRONOUS</tt> attribute can prevent compiler optimization with temporary data movement,  
but only if the receive buffer and the local references are  
separated into different variables,  
as shown in Example <a href="node497.htm#Node497">Permanent Data Movement</a>  
and in Example <a href="node498.htm#Node498">Comparison with C</a>.  
<P> 
Note also that the methods  
<ul> 
 
<li>calling <font face="sans-serif"> MPI_F_SYNC_REG</font> (or such a user-defined routine),  
 
<li>using module variables and <tt> COMMON</tt> blocks, and  
 
<li>the <tt> TARGET</tt> attribute  
</ul> 
<br> 
cannot be used to prevent such temporary data movement.  
These methods influence compiler optimization when  
library routines are called. They cannot prevent the optimizations  
of the code fragments shown in  
Example <a href="node496.htm#Node496">Temporary Data Movement and Temporary Memory Modification</a>  
and <a href="node496.htm#Node496">Temporary Data Movement and Temporary Memory Modification</a>.  
<P> 
Note also that compiler optimization with temporary data movement  
should <b> not</b> be prevented by declaring <font face="sans-serif"> buf</font> as <tt> VOLATILE</tt>  
because  
the <tt> VOLATILE</tt> implies that all accesses to any storage unit (word)  
of <font face="sans-serif"> buf</font> must be directly done in the main memory exactly  
in the sequence defined by the application program.  
The <tt> VOLATILE</tt> attribute prevents all register and cache optimizations.  
Therefore, <tt> VOLATILE</tt> may cause a huge performance degradation.  
<P> 
Instead of solving the problem, it is better to <b> prevent</b> the problem:  
when overlapping communication and computation,  
the nonblocking communication (or nonblocking or split collective I/O)  
and the computation should be executed <b> on different variables</b>,  
and the communication should be <em> protected</em> with the  
<tt> ASYNCHRONOUS</tt> attribute.  
In this case, the temporary memory modifications are done  
only on the variables used in the computation and cannot have any  
side effect on the data used in the nonblocking <font face="sans-serif"> MPI</font> operations.  
 
<br> 
<em> Rationale.</em>  
<P> 
This is a strong restriction for application programs.  
To weaken this restriction, a new or modified asynchronous feature  
in the Fortran language would be necessary:  
an asynchronous attribute that can be used on parts of an array  
and together with asynchronous operations outside the scope of Fortran.  
If such a feature becomes available in a future edition of the Fortran standard,  
then this restriction also may be weakened in a later version  
of the <font face="sans-serif"> MPI</font> standard.  
 (<em> End of rationale.</em>) <br> 
In Example <a href="node497.htm#Node497">Permanent Data Movement</a>  
(which is a solution for the problem shown in  
Example <a href="node484.htm#Node489">Solutions</a>  
and in Example <a href="node498.htm#Node498">Comparison with C</a>  
(which is a solution for the problem shown in  
Example <a href="node496.htm#Node496">Temporary Data Movement and Temporary Memory Modification</a>),  
the array is split into inner and halo  
part and both disjoint parts are passed to a subroutine <tt>separated_sections</tt>.  
This routine overlaps the receiving of the halo data and the calculations  
on the inner part of the array.  
In a second step, the whole array is used to do  
the calculation on the elements where inner+halo is needed.  
Note that the halo and the inner area are strided arrays.  
Those can be used in nonblocking communication  
only with a Fortran 2018 (or TS 29113) based <font face="sans-serif"> MPI</font> library.  
<P> 

<P>
<hr>
<a href="node484.htm#Node495"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node464.htm#Node464"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node497.htm#Node497"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node464.htm#Node464"> Support for Fortran</a>
<b>Next: </b><a href="node497.htm#Node497"> Permanent Data Movement</a>
<b>Previous: </b><a href="node484.htm#Node495"> The Fortran <tt> TARGET</tt> Attribute</a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
