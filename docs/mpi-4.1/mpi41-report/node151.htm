<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-coll/coll-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title>Nonblocking Gather-to-all</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node151">7.12.5. Nonblocking Gather-to-all</span></h2>
<a href="node150.htm#Node150"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node145.htm#Node145"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node152.htm#Node152"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node145.htm#Node145"> Nonblocking Collective Operations</a>
<b>Next: </b><a href="node152.htm#Node152"> Nonblocking All-to-All Scatter/Gather</a>
<b>Previous: </b><a href="node150.htm#Node150"> Nonblocking Scatter</a>
<p>
  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_IALLGATHER(<span style="white-space:nowrap">sendbuf</span>, <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvbuf</span>, <span style="white-space:nowrap">recvcount</span>, <span style="white-space:nowrap">recvtype</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD> IN sendbuf</TD><TD>starting address of send buffer (choice)</TD></TR>  
<TR><TD> IN sendcount</TD><TD>number of elements in send buffer (non-negative integer)</TD></TR>  
<TR><TD> IN sendtype</TD><TD>datatype of send buffer elements (handle)</TD></TR>  
<TR><TD> OUT recvbuf</TD><TD>address of receive buffer (choice)</TD></TR>  
<TR><TD> IN recvcount</TD><TD>number of elements received from any <font face="sans-serif"> MPI</font> process (non-negative integer)</TD></TR>  
<TR><TD> IN recvtype</TD><TD>datatype of receive buffer elements (handle)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Iallgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request) <br></tt>  
  
  <tt> int MPI_Iallgather_c(const void *sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void *recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Iallgather(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror) <br><br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sendbuf</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">recvcount</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span> <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">recvbuf</span> <br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span> <br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Iallgather(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror) !(_c) <br><br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sendbuf</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">recvcount</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span> <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">recvbuf</span> <br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span> <br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_IALLGATHER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, COMM, REQUEST, IERROR) <br><br>&lt;type&gt; <span style="white-space:nowrap">SENDBUF(*)</span>, <span style="white-space:nowrap">RECVBUF(*)</span> <br>INTEGER <span style="white-space:nowrap">SENDCOUNT</span>, <span style="white-space:nowrap">SENDTYPE</span>, <span style="white-space:nowrap">RECVCOUNT</span>, <span style="white-space:nowrap">RECVTYPE</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
This call starts a nonblocking variant of <font face="sans-serif"> MPI_ALLGATHER</font>  
(see Section <a href="node126.htm#Node126">Gather-to-all</a>).   
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_IALLGATHERV(<span style="white-space:nowrap">sendbuf</span>, <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvbuf</span>, <span style="white-space:nowrap">recvcounts</span>, <span style="white-space:nowrap">displs</span>, <span style="white-space:nowrap">recvtype</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD> IN sendbuf</TD><TD>starting address of send buffer (choice)</TD></TR>  
<TR><TD> IN sendcount</TD><TD>number of elements in send buffer (non-negative integer)</TD></TR>  
<TR><TD> IN sendtype</TD><TD>datatype of send buffer elements (handle)</TD></TR>  
<TR><TD> OUT recvbuf</TD><TD>address of receive buffer (choice)</TD></TR>  
<TR><TD> IN recvcounts</TD><TD>nonnegative integer array (of length group size) containing the number of elements that are received from each <font face="sans-serif"> MPI</font> process</TD></TR>  
<TR><TD> IN displs</TD><TD>integer array (of length group size). Entry <font face="sans-serif"> i</font> specifies the displacement (relative to <font face="sans-serif"> recvbuf</font>) at which to place the incoming data from <font face="sans-serif"> MPI</font> process <font face="sans-serif"> i</font></TD></TR>  
<TR><TD> IN recvtype</TD><TD>datatype of receive buffer elements (handle)</TD></TR>  
<TR><TD> IN comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD> OUT request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Iallgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request) <br></tt>  
  
  <tt> int MPI_Iallgatherv_c(const void *sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void *recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Iallgatherv(sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request, ierror) <br><br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sendbuf</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">sendcount</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span> <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">recvbuf</span> <br>INTEGER, INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">recvcounts(*)</span>, <span style="white-space:nowrap">displs(*)</span> <br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span> <br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Iallgatherv(sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request, ierror) !(_c) <br><br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sendbuf</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">sendcount</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span> <br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">recvbuf</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">recvcounts(*)</span> <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">displs(*)</span> <br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span> <br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_IALLGATHERV(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNTS, DISPLS, RECVTYPE, COMM, REQUEST, IERROR) <br><br>&lt;type&gt; <span style="white-space:nowrap">SENDBUF(*)</span>, <span style="white-space:nowrap">RECVBUF(*)</span> <br>INTEGER <span style="white-space:nowrap">SENDCOUNT</span>, <span style="white-space:nowrap">SENDTYPE</span>, <span style="white-space:nowrap">RECVCOUNTS(*)</span>, <span style="white-space:nowrap">DISPLS(*)</span>, <span style="white-space:nowrap">RECVTYPE</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
This call starts a nonblocking variant of <font face="sans-serif"> MPI_ALLGATHERV</font> (see  
Section <a href="node126.htm#Node126">Gather-to-all</a>).   
<P> 

<P>
<hr>
<a href="node150.htm#Node150"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node145.htm#Node145"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node152.htm#Node152"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node145.htm#Node145"> Nonblocking Collective Operations</a>
<b>Next: </b><a href="node152.htm#Node152"> Nonblocking All-to-All Scatter/Gather</a>
<b>Previous: </b><a href="node150.htm#Node150"> Nonblocking Scatter</a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
