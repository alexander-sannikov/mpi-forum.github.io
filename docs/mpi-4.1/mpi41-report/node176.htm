<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-context/context-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title><font face="sans-serif"> MPI</font>'s Support for Libraries</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node176">8.1.2.  MPI's Support for Libraries</span></h2>
<a href="node175.htm#Node175"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node174.htm#Node174"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node177.htm#Node177"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node174.htm#Node174"> Introduction</a>
<b>Next: </b><a href="node177.htm#Node177"> Basic Concepts</a>
<b>Previous: </b><a href="node175.htm#Node175"> Features Needed to Support Libraries</a>
<p>
  
The corresponding  
concepts that <font face="sans-serif"> MPI</font> provides, specifically to support robust libraries, are  
as follows:  
<ul> 
  
<li><b> Contexts</b> of communication,  
 
<li><b> Groups</b> of <font face="sans-serif"> MPI</font> processes,  
 
<li><b> Virtual topologies</b>,  
 
<li><b> Attribute caching</b>,  
 
<li><b> Communicators</b>.  
</ul> 
<br> 
<b> Communicators</b> (see [<a href="node600.htm#-Bib23">23</a>,<a href="node600.htm#-Bib61">61</a>,<a href="node600.htm#-Bib65">65</a>]) encapsulate all of  
these ideas in order to provide the appropriate scope for all communication  
operations in <font face="sans-serif"> MPI</font>. Communicators are divided into two kinds:  
intra-communicators for operations within a single group of <font face="sans-serif"> MPI</font> processes and  
inter-communicators for operations between two groups of <font face="sans-serif"> MPI</font>  
processes.  
<P> 
<b> Caching.</b> Communicators (see  
below) provide a ``caching'' mechanism that allows one to  
associate new attributes with communicators, on  
par with <font face="sans-serif"> MPI</font> built-in  
features. This can be used by advanced users to adorn communicators further,  
and by <font face="sans-serif"> MPI</font> to implement some communicator functions. For example, the  
virtual-topology functions described in  
Chapter <a href="node218.htm#Node218">Virtual Topologies for <font face="sans-serif"> MPI</font> Processes</a> are likely to be supported this way.  
<P> 
<b> Groups.</b> Groups  
define an ordered collection of <font face="sans-serif"> MPI</font> processes, each with a rank, and it is this  
group that defines the low-level names (ranks) for communication.  
Thus, groups define a scope for <font face="sans-serif"> MPI</font> process  
names in point-to-point communication. In addition, groups define the scope  
of collective operations. Groups may be manipulated separately from  
communicators in <font face="sans-serif"> MPI</font>, but only communicators can be used in  
communication operations.  
<P> 
<b> Intra-Communicators.</b> The most commonly used means for  
message-passing in <font face="sans-serif"> MPI</font> is via intra-communicators. Intra-communicators contain an  
instance of a group, contexts of communication for both point-to-point and  
collective communication, and the ability to include virtual topology and  
other attributes.  
These features work as follows:  
<ul> 
 
<li><b> Contexts</b> provide the ability to have separate safe ``universes''  
of message-passing in <font face="sans-serif"> MPI</font>. A context is akin to an additional  
tag that differentiates messages.  
The system manages this differentiation process.  
The use of separate communication  
contexts by distinct libraries (or distinct library invocations)  
insulates communication internal to the library execution from  
external communication. This allows the invocation of the library even if  
there are <em> pending</em> communication operations  
or <em> decoupled </em><font face="sans-serif"> MPI</font> activities</em>  
on ``other'' communicators, and avoids the need to  
synchronize entry or exit into library code.  
<em> Pending</em> communication  
or <em> decoupled </em><font face="sans-serif"> MPI</font> activities</em> of   
point-to-point operations  
are also guaranteed not to interfere with  
collective communication operations within a single communicator.  
<P> 
 
<li><b> Groups</b> define the participants in the communication (see above)  
of a communicator.  
<P> 
 
<li>A <b> virtual topology</b> defines a special mapping of the <font face="sans-serif"> MPI</font> processes ranks in a  
  group to and from a topology. Special constructors for  
  communicators are defined in Chapter <a href="node218.htm#Node218">Virtual Topologies for <font face="sans-serif"> MPI</font> Processes</a> to provide  
  this feature. Intra-communicators as described in this chapter do  
  not have topologies.  
<P> 
 
<li><b> Attributes</b> define the local information that the user or  
library has added to a communicator for later reference.  
</ul> 
<br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
The practice in many communication libraries is that there is  
a unique, predefined communication universe that includes all  
<font face="sans-serif"> MPI</font> processes available when the parallel program is initiated; the <font face="sans-serif"> MPI</font> processes are  
assigned consecutive ranks. Participants in a point-to-point  
communication are identified by their rank; a collective communication  
(such as broadcast) always involves all <font face="sans-serif"> MPI</font> processes.  
When using the World Model (Section <a href="node266.htm#Node266">The World Model</a>), this practice can be  
followed in <font face="sans-serif"> MPI</font> by using the predefined communicator  
<font face="sans-serif"> MPI_COMM_WORLD</font>.  
 (<em> End of advice to users.</em>) <br> 
<b> Inter-Communicators.</b>  
The discussion has dealt so far with <b> intra-communication</b>:  
communication  
within a group. <font face="sans-serif"> MPI</font> also supports <b> inter-communication</b>:   
communication  
between two nonoverlapping groups. When an application is built by composing  
several parallel modules, it is convenient to allow one module to communicate  
with another using local ranks for addressing within the second module. This  
is especially convenient in a client-server computing paradigm, where either  
client or server are parallel. The support of inter-communication  
also provides a mechanism for the extension of <font face="sans-serif"> MPI</font> to a dynamic model where  
not all <font face="sans-serif"> MPI</font> processes are preallocated at initialization time. In such a  
situation, it becomes necessary to support communication across ``universes.''  
Inter-communication is supported by objects called  
<b> inter-communicators</b>.  
These objects bind two groups together with communication contexts shared by  
both groups.  
For inter-communicators, these features work as follows:  
<ul> 
 
<li>Contexts provide the ability to have  
a separate safe ``universe''  
of message-passing between the two groups. A send operation in the local  
group is always matched by a receive operation in the remote group, and vice versa.  
The system manages this differentiation process.  
The use of separate communication  
contexts by distinct libraries (or distinct library invocations)  
insulates communication internal to the library execution from  
external communication. This allows the invocation of the library even if  
there are <em> pending</em> communication operations  
or <em> decoupled </em><font face="sans-serif"> MPI</font> activities</em>  
on ``other'' communicators, and avoids the need to  
synchronize entry or exit into library  
code.  
<P> 
 
<li>A local and remote group specify the recipients and destinations  
for an intercommunicator.  
<P> 
 
<li>Virtual topology is undefined for an inter-communicator.  
<P> 
 
<li>As before,  
attributes cache defines the local information that the user or  
library has added to a communicator for later reference.  
</ul> 
<br> 
<font face="sans-serif"> MPI</font> provides mechanisms for creating and manipulating inter-communicators.  
They are used for point-to-point  
and collective  
communication in a related manner to  
intra-communicators. Users who do not need inter-communication  
in their applications can safely ignore this extension.   
Users  
who require inter-communication between overlapping groups  
must layer  
this capability on top of <font face="sans-serif"> MPI</font>.  
<P> 

<P>
<hr>
<a href="node175.htm#Node175"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node174.htm#Node174"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node177.htm#Node177"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node174.htm#Node174"> Introduction</a>
<b>Next: </b><a href="node177.htm#Node177"> Basic Concepts</a>
<b>Previous: </b><a href="node175.htm#Node175"> Features Needed to Support Libraries</a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
