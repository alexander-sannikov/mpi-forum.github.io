<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-coll/coll-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title><font face="sans-serif"> MPI</font> Process-Local Reduction</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node137">7.9.7.  MPI Process-Local Reduction</span></h2>
<a href="node136.htm#Node136"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node129.htm#Node129"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node138.htm#Node138"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node129.htm#Node129"> Global Reduction Operations</a>
<b>Next: </b><a href="node138.htm#Node138"> Reduce-Scatter</a>
<b>Previous: </b><a href="node136.htm#Node136"> All-Reduce</a>
<p>
  
  
The functions in this section are of importance to library implementors  
who may want to implement special reduction patterns that are otherwise  
not easily covered by the standard <font face="sans-serif"> MPI</font> operations.  
<P> 
The following function applies a reduction operator to local arguments.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_REDUCE_LOCAL(<span style="white-space:nowrap">inbuf</span>, <span style="white-space:nowrap">inoutbuf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">op</span>)</TD></TR>  
<TR><TD> IN inbuf</TD><TD>input buffer (choice)</TD></TR>  
<TR><TD> INOUT inoutbuf</TD><TD>combined input and output buffer (choice)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements in <font face="sans-serif"> inbuf</font> and <font face="sans-serif"> inoutbuf</font> buffers (non-negative integer)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype of elements of <font face="sans-serif"> inbuf</font> and <font face="sans-serif"> inoutbuf</font> buffers (handle)</TD></TR>  
<TR><TD> IN op</TD><TD>operation (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Reduce_local(const void *inbuf, void *inoutbuf, int count, MPI_Datatype datatype, MPI_Op op) <br></tt>  
  
  <tt> int MPI_Reduce_local_c(const void *inbuf, void *inoutbuf, MPI_Count count, MPI_Datatype datatype, MPI_Op op) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Reduce_local(inbuf, inoutbuf, count, datatype, op, ierror) <br><br>TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">inbuf</span> <br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">inoutbuf</span> <br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(MPI_Op), INTENT(IN) :: <span style="white-space:nowrap">op</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Reduce_local(inbuf, inoutbuf, count, datatype, op, ierror) !(_c) <br><br>TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">inbuf</span> <br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">inoutbuf</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>TYPE(MPI_Op), INTENT(IN) :: <span style="white-space:nowrap">op</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_REDUCE_LOCAL(INBUF, INOUTBUF, COUNT, DATATYPE, OP, IERROR) <br><br>&lt;type&gt; <span style="white-space:nowrap">INBUF(*)</span>, <span style="white-space:nowrap">INOUTBUF(*)</span> <br>INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">OP</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
The function applies the operation given by <font face="sans-serif"> op</font> element-wise to the elements of  
<font face="sans-serif"> inbuf</font> and <font face="sans-serif"> inoutbuf</font> with the result stored element-wise in <font face="sans-serif"> inoutbuf</font>,  
as explained for user-defined operations in Section <a href="node134.htm#Node134">User-Defined Reduction Operations</a>.  
Both <font face="sans-serif"> inbuf</font> and <font face="sans-serif"> inoutbuf</font> (input as well as result) have the same number  
of elements given by <font face="sans-serif"> count</font> and the same datatype given by <font face="sans-serif"> datatype</font>.  
The <font face="sans-serif"> MPI_IN_PLACE</font> option is not allowed.  
<P> 
Reduction operations can be queried for their commutativity.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_OP_COMMUTATIVE(<span style="white-space:nowrap">op</span>, <span style="white-space:nowrap">commute</span>)</TD></TR>  
<TR><TD> IN op</TD><TD>operation (handle)</TD></TR>  
<TR><TD> OUT commute</TD><TD><font face="sans-serif"> true</font> if <font face="sans-serif"> op</font> is commutative, <font face="sans-serif"> false</font> otherwise (logical)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Op_commutative(MPI_Op op, int *commute) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Op_commutative(op, commute, ierror) <br><br>TYPE(MPI_Op), INTENT(IN) :: <span style="white-space:nowrap">op</span> <br>LOGICAL, INTENT(OUT) :: <span style="white-space:nowrap">commute</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_OP_COMMUTATIVE(OP, COMMUTE, IERROR) <br><br>INTEGER <span style="white-space:nowrap">OP</span>, <span style="white-space:nowrap">IERROR</span> <br>LOGICAL <span style="white-space:nowrap">COMMUTE</span> <br></tt>  
<P> 

<P>
<hr>
<a href="node136.htm#Node136"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node129.htm#Node129"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node138.htm#Node138"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node129.htm#Node129"> Global Reduction Operations</a>
<b>Next: </b><a href="node138.htm#Node138"> Reduce-Scatter</a>
<b>Previous: </b><a href="node136.htm#Node136"> All-Reduce</a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
