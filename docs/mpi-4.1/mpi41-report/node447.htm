<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-deprecated/deprecated-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title>Deprecated since <font face="sans-serif"> MPI-4.1</font></title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node447">17.4. Deprecated since  MPI-4.1</span></h1>
<a href="node446.htm#Node446"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node443.htm#Node443"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node447.htm#Node448"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node443.htm#Node443"> Deprecated Interfaces</a>
<b>Next: </b><a href="node447.htm#Node448"> Host Rank</a>
<b>Previous: </b><a href="node446.htm#Node446"> Deprecated since <font face="sans-serif"> MPI-4.0</font></a>
<p>
  
<P> 
<ul> 
 
<li>  
The use of the <tt>mpif.h</tt> include file has been deprecated.  
Information supporting the transition to <tt>USE mpi</tt> or <tt>USE mpi_f08</tt> is provided in Section <a href="node468.htm#Node468">Fortran Support Through the <tt>mpif.h</tt> Include File</a>.  
<P> 
  
 
<li>  
The predefined attribute key <font face="sans-serif"> MPI_HOST</font> for <font face="sans-serif"> MPI_COMM_WORLD</font> when using the World Model is deprecated.  
<P> 
<dl> 
 
<dt> 
<b><font face="sans-serif"> MPI_HOST</font>:</b><dd> 
 Host process rank, if such exists,  
<font face="sans-serif"> MPI_PROC_NULL</font>, otherwise.  
</dl> 
<br> 
<ul> 
</ul> 

<P>
<hr>
<a href="node446.htm#Node446"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node443.htm#Node443"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node447.htm#Node448"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node443.htm#Node443"> Deprecated Interfaces</a>
<b>Next: </b><a href="node447.htm#Node448"> Host Rank</a>
<b>Previous: </b><a href="node446.htm#Node446"> Deprecated since <font face="sans-serif"> MPI-4.0</font></a>
<p>
<hr><h3><span id="Node448">Host Rank</span></h3>
<a href="node447.htm#Node447"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node447.htm#Node447"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node449.htm#Node449"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node447.htm#Node447"> Deprecated since <font face="sans-serif"> MPI-4.1</font></a>
<b>Next: </b><a href="node449.htm#Node449"> Removed Interfaces</a>
<b>Previous: </b><a href="node447.htm#Node447"> Deprecated since <font face="sans-serif"> MPI-4.1</font></a>
<p>
  
The value returned for <font face="sans-serif"> MPI_HOST</font> gets the rank of the <em> HOST</em> process in the group associated  
with communicator <font face="sans-serif"> MPI_COMM_WORLD</font>, if there is such.  
<font face="sans-serif"> MPI_PROC_NULL</font> is returned if there is no host.  
<font face="sans-serif"> MPI</font> does not specify what it  
means for a process to be a <em> HOST</em>, nor does it requires that a <em> HOST</em>  
exists.  
<P> 
The attribute <font face="sans-serif"> MPI_HOST</font> has the same value on all processes  
of <font face="sans-serif"> MPI_COMM_WORLD</font>.  
<P> 
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT"><TD ALIGN="CENTER" COLSPAN=1><b> Environmental inquiry keys</b> </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
 C type: <tt> const int</tt> (or unnamed <tt> enum</tt>) </TD></TR> 
<TR><TD ALIGN="LEFT">  
 Fortran type: <tt> INTEGER</tt> </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
<font face="sans-serif"> MPI_HOST</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</div>  
<P> 
  
 
<li>All <font face="sans-serif"> MPI_</font><font face="sans-serif"> XXX</font>_X</font> procedures have been deprecated and may be removed in a future version of the <font face="sans-serif"> MPI</font> specification.  
In the case of their C binding and their Fortran binding through the <tt>mpi_f08</tt> module, they are superseded by the large count and large byte displacement bindings of their counterpart in the form of <font face="sans-serif"> MPI_</font><font face="sans-serif"> XXX</font></font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_SIZE_X(<span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">size</span>)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype to get information on (handle)</TD></TR>  
<TR><TD> OUT size</TD><TD>datatype size (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Type_size_x(MPI_Datatype datatype, MPI_Count *size) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Type_size_x(datatype, size, ierror) <br><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: <span style="white-space:nowrap">size</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_TYPE_SIZE_X(DATATYPE, SIZE, IERROR) <br><br>INTEGER <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span> <br>INTEGER(KIND=MPI_COUNT_KIND) <span style="white-space:nowrap">SIZE</span> <br></tt>  
<P> 
The description of <font face="sans-serif"> MPI_TYPE_SIZE</font> is applicable to this deprecated <font face="sans-serif"> MPI_TYPE_SIZE_X</font> accordingly,  
see Section <a href="node101.htm#Node101">Address and Size Procedures</a>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_GET_EXTENT_X(<span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">lb</span>, <span style="white-space:nowrap">extent</span>)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype to get information on (handle)</TD></TR>  
<TR><TD> OUT lb</TD><TD>lower bound of datatype (integer)</TD></TR>  
<TR><TD> OUT extent</TD><TD>extent of datatype (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Type_get_extent_x(MPI_Datatype datatype, MPI_Count *lb, MPI_Count *extent) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Type_get_extent_x(datatype, lb, extent, ierror) <br><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: <span style="white-space:nowrap">lb</span>, <span style="white-space:nowrap">extent</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_TYPE_GET_EXTENT_X(DATATYPE, LB, EXTENT, IERROR) <br><br>INTEGER <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span> <br>INTEGER(KIND=MPI_COUNT_KIND) <span style="white-space:nowrap">LB</span>, <span style="white-space:nowrap">EXTENT</span> <br></tt>  
<P> 
The description of <font face="sans-serif"> MPI_TYPE_GET_EXTENT</font> is applicable to this deprecated <font face="sans-serif"> MPI_TYPE_GET_EXTENT_X</font> accordingly,  
see Section <a href="node103.htm#Node103">Extent and Bounds of Datatypes</a>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_TYPE_GET_TRUE_EXTENT_X(<span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">true_lb</span>, <span style="white-space:nowrap">true_extent</span>)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype to get information on (handle)</TD></TR>  
<TR><TD> OUT true_lb</TD><TD>true lower bound of datatype (integer)</TD></TR>  
<TR><TD> OUT true_extent</TD><TD>true extent of datatype (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Type_get_true_extent_x(MPI_Datatype datatype, MPI_Count *true_lb, MPI_Count *true_extent) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Type_get_true_extent_x(datatype, true_lb, true_extent, ierror) <br><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: <span style="white-space:nowrap">true_lb</span>, <span style="white-space:nowrap">true_extent</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_TYPE_GET_TRUE_EXTENT_X(DATATYPE, TRUE_LB, TRUE_EXTENT, IERROR) <br><br>INTEGER <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span> <br>INTEGER(KIND=MPI_COUNT_KIND) <span style="white-space:nowrap">TRUE_LB</span>, <span style="white-space:nowrap">TRUE_EXTENT</span> <br></tt>  
<P> 
The description of <font face="sans-serif"> MPI_TYPE_GET_TRUE_EXTENT</font> is applicable to this deprecated <font face="sans-serif"> MPI_TYPE_GET_TRUE_EXTENT_X</font> accordingly,  
see Section <a href="node104.htm#Node104">True Extent of Datatypes</a>.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_GET_ELEMENTS_X(<span style="white-space:nowrap">status</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">count</span>)</TD></TR>  
<TR><TD> IN status</TD><TD>return status of receive operation (status)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype used by receive operation (handle)</TD></TR>  
<TR><TD> OUT count</TD><TD>number of received basic elements (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Get_elements_x(const MPI_Status *status, MPI_Datatype datatype, MPI_Count *count) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Get_elements_x(status, datatype, count, ierror) <br><br>TYPE(MPI_Status), INTENT(IN) :: <span style="white-space:nowrap">status</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: <span style="white-space:nowrap">count</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_GET_ELEMENTS_X(STATUS, DATATYPE, COUNT, IERROR) <br><br>INTEGER <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span> <br>INTEGER(KIND=MPI_COUNT_KIND) <span style="white-space:nowrap">COUNT</span> <br></tt>  
<P> 
The description of <font face="sans-serif"> MPI_GET_ELEMENTS</font> is applicable to this deprecated <font face="sans-serif"> MPI_GET_ELEMENTS_X</font> accordingly,  
see Section <a href="node107.htm#Node107">Use of General Datatypes in Communication</a>.  
<P> 
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_STATUS_SET_ELEMENTS_X(<span style="white-space:nowrap">status</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">count</span>)</TD></TR>  
<TR><TD> INOUT status</TD><TD>status with which to associate count (status)</TD></TR>  
<TR><TD> IN datatype</TD><TD>datatype associated with count (handle)</TD></TR>  
<TR><TD> IN count</TD><TD>number of elements to associate with status (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Status_set_elements_x(MPI_Status *status, MPI_Datatype datatype, MPI_Count count) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Status_set_elements_x(status, datatype, count, ierror) <br><br>TYPE(MPI_Status), INTENT(INOUT) :: <span style="white-space:nowrap">status</span> <br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span> <br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_STATUS_SET_ELEMENTS_X(STATUS, DATATYPE, COUNT, IERROR) <br><br>INTEGER <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span> <br>INTEGER(KIND=MPI_COUNT_KIND) <span style="white-space:nowrap">COUNT</span> <br></tt>  
<P> 
The description of <font face="sans-serif"> MPI_STATUS_SET_ELEMENTS</font> is applicable to this deprecated <font face="sans-serif"> MPI_STATUS_SET_ELEMENTS_X</font> accordingly,  
see Section <a href="node347.htm#Node347">Associating Information with Status</a>.  
<P> 
</ul> 
<br> 
  
<P> 
  

<P>
<hr>
<a href="node447.htm#Node447"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node447.htm#Node447"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node449.htm#Node449"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node447.htm#Node447"> Deprecated since <font face="sans-serif"> MPI-4.1</font></a>
<b>Next: </b><a href="node449.htm#Node449"> Removed Interfaces</a>
<b>Previous: </b><a href="node447.htm#Node447"> Deprecated since <font face="sans-serif"> MPI-4.1</font></a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
