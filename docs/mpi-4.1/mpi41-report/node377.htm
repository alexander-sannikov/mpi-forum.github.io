<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-io/io-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi4-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi41-report-html.idx -basedef mpi4defs.txt -o mpi41-report.tex mpi-report.tex 
-->
<title>External Data Representation: <font face="sans-serif"> </font><tt>"</tt>external32<tt>"</tt></font></title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node377">15.5.2. External Data Representation:  "external32"</span></h2>
<a href="node376.htm#Node376"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node375.htm#Node375"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node378.htm#Node378"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node375.htm#Node375"> File Interoperability</a>
<b>Next: </b><a href="node378.htm#Node378"> User-Defined Data Representations</a>
<b>Previous: </b><a href="node376.htm#Node376"> Datatypes for File Interoperability</a>
<p>
  
All <font face="sans-serif"> MPI</font> implementations are required to support the data representation  
defined in this section.    
Support of optional datatypes (e.g., <font face="sans-serif"> MPI_INTEGER2</font>)  
is not required.  
<P> 
All floating point values are in big-endian  
IEEE format [<a href="node600.htm#-Bib43">43</a>] of the appropriate size.  
Floating point values are represented by one  
of three IEEE formats.   
 These are the IEEE ``Single (binary32),'' ``Double (binary64),'' and   
``Double Extended (binary128)'' formats, requiring 4, 8, and 16 bytes of storage,   
respectively.   
For the IEEE ``Double Extended (binary128)'' formats, <font face="sans-serif"> MPI</font> specifies a  
format width of 16 bytes, with 15 exponent bits,   
bias = +16383,  
112 fraction bits, and an encoding analogous to the ``Double (binary64)'' format.   
All integral values are in two's complement big-endian format.  
Big-endian means most significant byte at lowest address byte.  
 For C <tt> _Bool</tt>, Fortran <tt> LOGICAL</tt>, and C++ <tt> bool</tt>,  
 <font face="sans-serif"> 0</font> implies false and nonzero implies true.   
 C <tt> float _Complex</tt>, <tt> double _Complex</tt>, and <tt> long  
 double _Complex</tt>,   
 Fortran <tt> COMPLEX</tt> and <tt> DOUBLE COMPLEX</tt>, and other complex  
 types are represented  
 by a pair of floating point  
 format values for the real and imaginary components.  
Characters are in ISO 8859-1 format [<a href="node600.htm#-Bib44">44</a>].  
Wide characters (of type <font face="sans-serif"> MPI_WCHAR</font>)  
are in Unicode format [<a href="node600.htm#-Bib69">69</a>].  
<P> 
All signed numerals (e.g., <font face="sans-serif"> MPI_INT</font>, <font face="sans-serif"> MPI_REAL</font>)  
have the sign bit at the most significant bit.  
<font face="sans-serif"> MPI_COMPLEX</font> and <font face="sans-serif"> MPI_DOUBLE_COMPLEX</font> have the sign  
bit of the real and imaginary parts at the most significant bit of each part.  
<P> 
According to IEEE specifications [<a href="node600.htm#-Bib43">43</a>], the ``NaN''  
(not a number) is system dependent.  
 It should not be interpreted within <font face="sans-serif"> MPI</font> as  
anything other than ``NaN.''  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
The <font face="sans-serif"> MPI</font> treatment of ``NaN'' is similar to the approach used in XDR [<a href="node600.htm#-Bib66">66</a>].  
 (<em> End of advice to implementors.</em>) <br> 
All data is byte aligned, regardless of type.  
All data items are stored contiguously in the file  
(if the file view is contiguous).  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
All bytes of <tt> LOGICAL</tt> and <tt> bool</tt> must be checked  
to determine the value.  
 (<em> End of advice to implementors.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
The type <font face="sans-serif"> MPI_PACKED</font> is treated as bytes and is not converted.  
The user should be aware that <font face="sans-serif"> MPI_PACK</font> has the option of placing  
a header in the beginning of the pack buffer.  
 (<em> End of advice to users.</em>) <br> 
<br> 
<b>Table 13: </b><span id="Table13"><font face="sans-serif"> </font><tt>"</tt>external32<tt>"</tt></font> sizes of predefined datatypes</span><P> 
  
  
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT">  
<b> Predefined Type</b></TD><TD ALIGN="LEFT"> <b> Length</b> </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
<font face="sans-serif"> MPI_PACKED</font></TD><TD ALIGN="LEFT"> 1 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_BYTE</font></TD><TD ALIGN="LEFT"> 1 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_CHAR</font></TD><TD ALIGN="LEFT"> 1 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_UNSIGNED_CHAR</font></TD><TD ALIGN="LEFT"> 1 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_SIGNED_CHAR</font></TD><TD ALIGN="LEFT"> 1 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_WCHAR</font></TD><TD ALIGN="LEFT"> 2 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_SHORT</font></TD><TD ALIGN="LEFT"> 2 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_UNSIGNED_SHORT</font></TD><TD ALIGN="LEFT"> 2 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_INT</font></TD><TD ALIGN="LEFT"> 4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_LONG</font></TD><TD ALIGN="LEFT"> 4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_UNSIGNED</font></TD><TD ALIGN="LEFT"> 4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_UNSIGNED_LONG</font></TD><TD ALIGN="LEFT"> 4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_LONG_LONG_INT</font></TD><TD ALIGN="LEFT"> 8 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_UNSIGNED_LONG_LONG</font></TD><TD ALIGN="LEFT"> 8 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_FLOAT</font></TD><TD ALIGN="LEFT"> 4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_DOUBLE</font></TD><TD ALIGN="LEFT"> 8 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_LONG_DOUBLE</font></TD><TD ALIGN="LEFT"> 16 </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
<font face="sans-serif"> MPI_C_BOOL</font></TD><TD ALIGN="LEFT"> 1 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_INT8_T</font></TD><TD ALIGN="LEFT"> 1 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_INT16_T</font></TD><TD ALIGN="LEFT"> 2 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_INT32_T</font></TD><TD ALIGN="LEFT"> 4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_INT64_T</font></TD><TD ALIGN="LEFT"> 8 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_UINT8_T</font></TD><TD ALIGN="LEFT"> 1 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_UINT16_T</font></TD><TD ALIGN="LEFT"> 2 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_UINT32_T</font></TD><TD ALIGN="LEFT"> 4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_UINT64_T</font></TD><TD ALIGN="LEFT"> 8 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_AINT</font></TD><TD ALIGN="LEFT"> 8 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_COUNT</font></TD><TD ALIGN="LEFT"> 8 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_OFFSET</font></TD><TD ALIGN="LEFT"> 8 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_C_COMPLEX</font></TD><TD ALIGN="LEFT"> 2*4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_C_FLOAT_COMPLEX</font></TD><TD ALIGN="LEFT"> 2*4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_C_DOUBLE_COMPLEX</font></TD><TD ALIGN="LEFT"> 2*8 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_C_LONG_DOUBLE_COMPLEX</font></TD><TD ALIGN="LEFT"> 2*16 </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
<font face="sans-serif"> MPI_CHARACTER</font></TD><TD ALIGN="LEFT"> 1 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_LOGICAL</font></TD><TD ALIGN="LEFT"> 4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_INTEGER</font></TD><TD ALIGN="LEFT"> 4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_REAL</font></TD><TD ALIGN="LEFT"> 4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_DOUBLE_PRECISION</font></TD><TD ALIGN="LEFT"> 8 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_COMPLEX</font></TD><TD ALIGN="LEFT"> 2*4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_DOUBLE_COMPLEX</font></TD><TD ALIGN="LEFT"> 2*8 </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
<font face="sans-serif"> MPI_CXX_BOOL</font></TD><TD ALIGN="LEFT"> 1 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_CXX_FLOAT_COMPLEX</font></TD><TD ALIGN="LEFT"> 2*4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_CXX_DOUBLE_COMPLEX</font></TD><TD ALIGN="LEFT"> 2*8 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_CXX_LONG_DOUBLE_COMPLEX</font></TD><TD ALIGN="LEFT"> 2*16 </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</div>  
<br> 
<b>Table 14: </b><span id="Table14"><font face="sans-serif"> </font><tt>"</tt>external32<tt>"</tt></font> sizes of optional datatypes</span><P> 
  
  
  
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT">  
 <b> Predefined Type</b></TD><TD ALIGN="LEFT"> <b> Length</b> </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
<font face="sans-serif"> MPI_INTEGER1</font></TD><TD ALIGN="LEFT"> 1 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_INTEGER2</font></TD><TD ALIGN="LEFT"> 2 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_INTEGER4</font></TD><TD ALIGN="LEFT"> 4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_INTEGER8</font></TD><TD ALIGN="LEFT"> 8 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_INTEGER16</font></TD><TD ALIGN="LEFT"> 16 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_REAL2</font></TD><TD ALIGN="LEFT"> 2 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_REAL4</font></TD><TD ALIGN="LEFT"> 4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_REAL8</font></TD><TD ALIGN="LEFT"> 8 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_REAL16</font></TD><TD ALIGN="LEFT"> 16 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_COMPLEX4</font></TD><TD ALIGN="LEFT"> 2*2 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_COMPLEX8</font></TD><TD ALIGN="LEFT"> 2*4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_COMPLEX16</font></TD><TD ALIGN="LEFT"> 2*8 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_COMPLEX32</font></TD><TD ALIGN="LEFT"> 2*16 </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</div>  
<br> 
<b>Table 15: </b><span id="Table15"><font face="sans-serif"> </font><tt>"</tt>external32<tt>"</tt></font> sizes of C++ datatypes</span><P> 
  
  
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT">  
<b> C++ Types</b></TD><TD ALIGN="LEFT"> <b> Length</b> </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
<font face="sans-serif"> MPI_CXX_BOOL</font></TD><TD ALIGN="LEFT"> 1 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_CXX_FLOAT_COMPLEX</font></TD><TD ALIGN="LEFT"> 2*4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_CXX_DOUBLE_COMPLEX</font></TD><TD ALIGN="LEFT"> 2*8 </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_CXX_LONG_DOUBLE_COMPLEX</font></TD><TD ALIGN="LEFT"> 2*16 </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD></TR></TABLE> 
</div>  
The sizes of the predefined datatypes returned from  
<font face="sans-serif"> MPI_TYPE_CREATE_F90_REAL</font>,  
<font face="sans-serif"> MPI_TYPE_CREATE_F90_COMPLEX</font>, and  
<font face="sans-serif"> MPI_TYPE_CREATE_F90_INTEGER</font>  
are defined in Section <a href="node473.htm#Node473">Additional Support for Fortran Numeric Intrinsic Types</a>,  
page <a href="node473.htm#Node474">Parameterized Datatypes with Specified Precision and Exponent Range</a>.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
When converting a larger size integer to a smaller size integer,  
only the least significant bytes are moved.  
Care must be taken to preserve the sign bit value.  
This allows no conversion errors  
if the data range is within the range of the smaller size integer.  
 (<em> End of advice to implementors.</em>) <br> 
Table <a href="node377.htm#Table13">13</a>, <a href="node377.htm#Table14">14</a>,  
and <a href="node377.htm#Table15">15</a> specify the sizes of  
predefined, optional, and C++ datatypes in <font face="sans-serif"> </font><tt>"</tt>external32<tt>"</tt></font> format,   
respectively.   
<P> 

<P>
<hr>
<a href="node376.htm#Node376"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node375.htm#Node375"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node378.htm#Node378"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node375.htm#Node375"> File Interoperability</a>
<b>Next: </b><a href="node378.htm#Node378"> User-Defined Data Representations</a>
<b>Previous: </b><a href="node376.htm#Node376"> Datatypes for File Interoperability</a>
<p>
<HR>
Return to <A HREF="node601.htm">MPI-4.1 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-4.1 of November 2, 2023<BR>
HTML Generated on November 19, 2023
</FONT>
</body>
</html>
